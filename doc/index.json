[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "libr-bridge/.external-ecmascript.js",
    "static": true,
    "longname": "libr-bridge/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "libr-bridge/R.mjs",
    "content": "\"use strict\";\n/**\n *\t@file libr-bridge: Bridging module between JavaScript and R\n *\t@author TAKAHASHI, Kyohei <kcrt@kcrt.net>\n *\t@version XXXX\n */\n\nimport ref from \"ref\";\nimport ffi from \"ffi\";\nimport createLibR, {ParseStatus} from \"./libR\";\nimport SEXPWrap from \"./SEXPWrap\";\nimport debug_ from \"debug\";\nconst debug = debug_(\"libr-bridge:class R\");\n\nlet R_isInitialized = false;\nlet R_GlobalEnv = undefined;\nlet func_cached = {};\nlet libR = undefined;\n\n/**\n * Class for accessing R via libR.\n */\nexport default class R{\n\t/**\n\t * Constructor function for class R\n\t */\n\tconstructor(){\n\t\tif(!R.isInitialized()){\n\t\t\tdebug(\"Initializing R...\");\n\t\t\tconst argv = [\"REmbeddedOnBridge\", \"--vanilla\", \"--gui=none\", \"--silent\"];\n\t\t\tlibR = createLibR();\n\t\t\tif(libR === void 0){\n\t\t\t\tdebug(\"Failed to initialize\");\n\t\t\t\tthrow new \"R initialization failed.\";\n\t\t\t}\n\t\t\tlibR.Rf_initEmbeddedR(argv.length, argv);\n\t\t\tlibR.R_setStartTime();\n\t\t\t/* Initialize values */\n\t\t\tR_GlobalEnv = new SEXPWrap(libR.R_GlobalEnv.deref()) ; //new SEXPWrap(libR.R_sysframe(0, ref.NULL));\n\t\t\t// R_GlobalEnv.preserve();\n\t\t\tR.R_NilValue = libR.Rf_GetRowNames(R.GlobalEnv);\t\t// passing non vector returns Nil\n\t\t\tif(!(new SEXPWrap(R.R_NilValue)).isNull()){\n\t\t\t\tthrow new Error(\"Can not acquire NilValue\");\n\t\t\t}\n\t\t\tR.R_UnboundValue = libR.Rf_findVar(libR.Rf_install(\"__non_existing_value_kcrt__\"), R.GlobalEnv);\n\t\t\tR.R_NamesSymbol = libR.Rf_install(\"names\");\n\t\t\tR.R_NaInt = this.eval(\"as.integer(NA)\");\t\t\t\t// usually INT_MIN (-2147483648)\n\t\t\t//R.R_NaString = new SEXPWrap(libR.STRING_ELT(this.eval_raw(\"as.character(NA)\").sexp, 0));\n\t\t\tR.R_NaString = new SEXPWrap(libR.R_NaString.deref());\n\t\t\tR.R_BlankString = new SEXPWrap(libR.R_BlankString.deref());\n\t\t\tR_isInitialized = true;\n\t\t}\n\t\tthis.__initializeRfunc();\n\t}\n\t/**\n\t *\tLoad some R functions.\n\t *\tPlease do not call manually.\n\t *\t@private\n\t */\n\t__initializeRfunc(){\n\t\tlet funclist = [\"print\", \"require\", \"mean\", \"cor\", \"var\", \"sd\", \"sqrt\", \"IQR\", \"min\", \"max\",\n\t\t\t\"range\", \"fisher.test\", \"t.test\", \"wilcox.test\", \"prop.test\", \"var.test\", \"p.adjust\",\n\t\t\t\"sin\", \"cos\", \"tan\", \"sum\", \"c\",\n\t\t\t\"is.na\", \"is.nan\", \"write.csv\"];\n\t\tfunclist.map((e) => {this[e] = this.func(e);});\n\t}\n\t/**\n\t * Check whether R class is globally initialized or not.\n\t * @return {boolean} Returns true if R is already loaded.\n\t */\n\tstatic isInitialized(){\n\t\treturn R_isInitialized;\n\t}\n\t/**\n\t * Acquire global environment in R.\n\t * @return {boolean} SEXP of global environment.\n\t */\n\tstatic get GlobalEnv(){\n\t\treturn R_GlobalEnv.sexp;\n\t}\n\t/**\n\t * Initialized libR object for accessing R.\n\t * @return {Object} libR\n\t */\n\tstatic get libR() {\n\t\treturn libR;\n\t}\n\t/**\n\t * Acquire bridging function to access R function.\n\t * Functions receive JavaScript value, and returns JavaScript compatible objects.\n\t * @param {string} name\t\tname of R function\n\t * @return {function}\t\tBridging function\n\t * @example\n\t *\tconst sum = R.func(\"sum\")\n\t *\tconsole.log(sum([1, 2, 3]))\t\t// prints 6\n\t */\n\tfunc(name){\n\t\treturn this.__RFuncBridge.bind(this, this.__func_sexp(name));\n\t}\n\t/**\n\t * Acquire bridging function to access R function.\n\t * This function doesn't convert to/from SEXP.\n\t * Receives SEXPWrap, and returns SEXPWrap. Please use carefully.\n\t * @param {string} name\t\tname of R function\n\t * @return {function}\t\tBridging function\n\t * @see {@link R#func}\n\t */\n\tfunc_raw(name){\n\t\treturn this._RFuncBridgeRaw.bind(this, this.__func_sexp(name));\n\t}\n\t/**\n\t * Find functions in R environment.\n\t * Please do not call this function manually.\n\t * @private\n\t * @param {string} name\t\tname of function\n\t * @return {SEXPWrap}\t\tSEXPWrap object of R function\n\t */\n\t__func_sexp(name){\n\t\tif(!(name in func_cached)){\n\t\t\tfunc_cached[name] = new SEXPWrap(libR.Rf_findFun(libR.Rf_install(name), R.GlobalEnv));\n\t\t\tfunc_cached[name].preserve();\t\t\t// Unfortunately, we have no destructor in JavaScript....\n\t\t}\n\t\treturn func_cached[name];\n\t}\n\t/**\n\t * Bridging function for R function.\n\t * This bridging function doesn't handle SEXP.\n\t * Please do not call this function manually.\n\t * @private\n\t * @param {function} _func\tSEXPWrap object of R function\n\t * @return {SEXPWrap}\t\tSEXPWrap object of returned value\n\t */\n\t__RFuncBridge_raw(_func){\n\t\t// Function name with \"raw\" receives SEXP, and returns SEXP\n\t\tlet lang;\n\t\tR.range(0, arguments.length).reverse().map((i) => {\n\t\t\tif(lang === void 0){\n\t\t\t\tlang = new SEXPWrap(libR.Rf_lcons(arguments[i].sexp, R.R_NilValue));\n\t\t\t}else{\n\t\t\t\tlang.protect();\n\t\t\t\tlang = new SEXPWrap(libR.Rf_lcons(arguments[i].sexp, lang.sexp));\n\t\t\t\tlang.unprotect(1);\t// this frees old lang\n\t\t\t}\n\t\t\tif(arguments[i].argtag !== void 0){\n\t\t\t\tlibR.SET_TAG(lang.sexp, libR.Rf_install(arguments[i].argtag));\n\t\t\t}\n\t\t});\n\t\tlang.protect();\t// protect the most recent one.\n\t\ttry{\n\t\t\tconst ret = this.__eval_langsxp(lang.sexp);\n\t\t\tlang.unprotect();\n\t\t\treturn ret;\n\t\t}catch(e){\n\t\t\tlang.protect();\n\t\t\tthrow e;\n\t\t}\n\t}\n\t/**\n\t * Bridging function for R function.\n\t * Please do not call this function manually.\n\t * @private\n\t * @param {function} func\tSEXPWrap object of R function\n\t * @return\t\t\t\t\tJavaScript compatible returned value\n\t */\n\t__RFuncBridge(func){\n\t\t// This receives normal Javascript value, and returns Javascript value\n\t\tconst argumentsArr = Array.apply(null, arguments).slice(1);\n\t\tlet argumentsSEXPWrap = new Array();\n\t\targumentsArr.map((e) => {\n\t\t\tif(e.constructor.name == \"Object\"){\n\t\t\t\t// add all items\n\t\t\t\tfor(let key of Object.keys(e)){\n\t\t\t\t\tconst sw = new SEXPWrap(e[key]);\n\t\t\t\t\tsw.protect();\n\t\t\t\t\tsw.argtag = key;\n\t\t\t\t\targumentsSEXPWrap.push(sw);\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\t// simply add\n\t\t\t\tconst sw = new SEXPWrap(e);\n\t\t\t\tsw.protect();\n\t\t\t\targumentsSEXPWrap.push(sw);\n\t\t\t}\n\t\t});\n\t\ttry {\n\t\t\tlet ret_sexp = this.__RFuncBridge_raw(func, ...argumentsSEXPWrap);\n\t\t\tret_sexp.protect();\n\t\t\tlet ret = ret_sexp.getValue();\n\t\t\tret_sexp.unprotect();\n\t\t\tSEXPWrap.unprotect(argumentsSEXPWrap.length);\n\t\t\treturn ret;\n\t\t}catch(e){\n\t\t\tSEXPWrap.unprotect(argumentsSEXPWrap.length);\n\t\t\tthrow e;\n\t\t}\n\t}\n\t/**\n\t * Execute R code.\n\t * @param {string} code\t\tR code\n\t * @param {boolean} silent\tSuppress error message if true.\n\t * @throws {Error}\t\t\tWhen execution fails.\n\t * @return {SEXPWrap}\t\tSEXPWrap object of returned value. Returns undefined on error.\n\t * @see {@link eval}, R_ParseEvalString\n\t */\n\teval_raw(code, silent=false){\n\t\tconst s = new SEXPWrap(code);\t\n\t\ts.protect();\n\t\tvar status = ref.alloc(ref.types.int);\n\t\tconst ps = new SEXPWrap(libR.R_ParseVector(s.sexp, -1, status, R.R_NilValue));\n\t\tps.protect();\n\t\tif(ref.deref(status) != ParseStatus.PARSE_OK ||\n\t\t\t!(ps.isExpression()) || \n\t\t\tps.length() != 1){\n\t\t\tps.unprotect(2);\n\t\t\tdebug(`Parse error.\\n-----\\n${code}\\n-----`);\n\t\t\tthrow new Error(\"Parse error of R code\");\n\t\t}else{\n\t\t\ttry {\n\t\t\t\tconst ret = this.__eval_langsxp(libR.VECTOR_ELT(ps.sexp, 0), silent);\n\t\t\t\tps.unprotect(2);\n\t\t\t\treturn ret;\n\t\t\t}catch(e){\n\t\t\t\tconst errmsg = libR.R_curErrorBuf();\n\t\t\t\tdebug(`Execution error in eval_raw.\\n----\\n${code}\\n\\nReason: ${errmsg}----`);\n\t\t\t\tps.unprotect(2);\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Execute R code with LANGSXP\n\t * @private\n\t */\n\t__eval_langsxp(langsxp, silent=false){\n\t\tvar errorOccurred = ref.alloc(ref.types.int, 0);\n\t\tconst f = silent ? libR.R_tryEvalSilent : libR.R_tryEval;\n\t\tconst retval = new SEXPWrap(f(langsxp, R.GlobalEnv, errorOccurred));\n\t\tif(ref.deref(errorOccurred)){\n\t\t\tconst errmsg = libR.R_curErrorBuf();\n\t\t\tthrow new Error(`Execution error: ${errmsg}`);\n\t\t}\n\t\treturn retval;\n\t}\n\t/**\n\t * Execute R code without error handling. App crashes when execution/parse failure.\n\t * Please use this function with care.\n\t * @param {string} code\t\tR code\n\t * @return {SEXPWrap}\t\tSEXPWrap object of returned value. Returns undefined on error.\n\t * @see {@link eval_raw}\n\t */\n\teval_direct(code){\n\t\treturn new SEXPWrap(libR.R_ParseEvalString(code, R.GlobalEnv));\n\t}\n\t/**\n\t * Execute R code.\n\t * @param {string} code\t\tR code\n\t * @param {boolean} silent\tSuppress error message if true.\n\t * @throws {Error}\t\t\tWhen execution fails.\n\t * @return\t\t\t\t\tJavaScript compatible object of returned value.\n\t * @example\n\t *\t\tlet value = R.eval(\"sum(c(1, 2, 3))\")\t\t// value will be 6\n\t */\n\teval(code, silent=false){\n\t\tconst ret = this.eval_raw(code, silent);\n\t\tret.protect();\n\t\tconst retval = ret.getValue();\n\t\tret.unprotect();\n\t\treturn retval;\n\t}\n\t/**\n\t * Execute R code with R try. This is more safe than {@link R#eval}.\n\t * @param {string} code\t\tR code\n\t * @param {boolean} silent\tSuppress error message if true.\n\t * @return\t\t\t\t\tReturned value. Returns undefined on error.\n\t */\n\tevalWithTry(code, silent=false){\n\t\tconst f = silent ? \"TRUE\" : \"FALSE\";\n\t\treturn this.eval(`try({${code}}, silent=${f})`);\n\t}\n\t/**\n\t * Acquire value of R variable\n\t * @param {string} varname\tName of variable\n\t * @return\t\t\t\t\tValue in the R variable.\n\t */\n\tgetVar(varname){\n\t\tlet varsexp = new SEXPWrap(libR.Rf_findVar(libR.Rf_install(varname), R.GlobalEnv));\n\t\tif(varsexp.sexp.address() == R.R_UnboundValue.address()){ return undefined; }\n\t\tvarsexp.protect();\n\t\tlet value = varsexp.getValue();\n\t\tvarsexp.unprotect();\n\t\treturn value;\n\t}\n\t/**\n\t * Acquire names attribute of R variable\n\t * @param {string} varname\tName of variable\n\t * @return {string}\t\t\tAssociated name attribute for the specified R variable. If no name, undefined will be returned.\n\t */\n\tgetVarNames(varname){\n\t\tlet varsexp = new SEXPWrap(libR.Rf_findVar(libR.Rf_install(varname), R.GlobalEnv));\n\t\treturn varsexp.names;\n\t}\n\t/**\n\t * Set value to R variable\n\t * @param {string} varname\tName of variable\n\t * @param {object} value\tValue you want to set to variable.\n\t */\n\tsetVar(varname, value){\n\t\tlet value_sexp = new SEXPWrap(value);\n\t\tvalue_sexp.protect();\n\t\tlibR.Rf_setVar(libR.Rf_install(varname), value_sexp.sexp, R.GlobalEnv);\n\t\tvalue_sexp.unprotect();\n\t}\n\t/**\n\t * Set names attribute to R variable\n\t * @param {string} varname\tName of variable\n\t * @param {object} value\tValue you want to set to names attributes\n\t */\n\tsetVarNames(varname, value){\n\t\tlet varsexp = new SEXPWrap(libR.Rf_findVar(libR.Rf_install(varname), R.GlobalEnv));\n\t\tvarsexp.names = value;\n\t}\n\t/**\n\t * Use your own console input/output instead of R's default one.\n\t * @param {function} onMessage\tFunction on showing message\n\t */\n\toverrideShowMessage(onMessage){\n\t\tconst ShowMessage = ffi.Callback(\"void\", [ref.types.CString], (msg) => onMessage(msg) );\n\t\tref.writePointer(libR.ptr_R_ShowMessage, 0, ShowMessage);\n\t}\n\t/**\n\t * Use your own console input/output instead of R's default one.\n\t * @param {function} onReadConsole\t\tFunction on console read\n\t */\n\toverrideReadConsole(onReadConsole){\n\t\tconst ReadConsole = ffi.Callback(\"int\", [ref.types.CString, ref.refType(ref.types.char), \"int\", \"int\"],\n\t\t\t(prompt, buf, len, _addtohistory) => {\n\t\t\t\tdebug(\"Read console start: \" + prompt);\n\t\t\t\tconst ret = onReadConsole(prompt) + \"\\n\";\n\t\t\t\tconst rebuf = ref.reinterpret(buf, len, 0);\n\t\t\t\tif(ret.length + 1 > len){\n\t\t\t\t\t/* too large! */\n\t\t\t\t\tdebug(\"Too long input for ReadConsole\");\n\t\t\t\t\tref.writeCString(rebuf, 0, \"ERROR\");\n\t\t\t\t}else{\n\t\t\t\t\tdebug(\"Writedown to buffer.\");\n\t\t\t\t\tref.writeCString(rebuf, 0, ret);\n\t\t\t\t}\n\t\t\t\tdebug(\"Read console fin\");\n\t\t\t\treturn 1;\n\t\t\t});\n\t\tref.writePointer(libR.ptr_R_ReadConsole, 0, ReadConsole);\n\t}\n\t/**\n\t * Use your own console input/output instead of R's default one.\n\t * @param {function} onWriteConsole\t\tFunction on console write\n\t */\n\toverrideWriteConsole(onWriteConsole){\n\t\tconst WriteConsole = ffi.Callback(\"void\", [ref.types.CString, \"int\"], (output, _len) => onWriteConsole(output) );\n\t\tconst WriteConsoleEx = ffi.Callback(\n\t\t\t\"void\", [ref.types.CString, \"int\", \"int\"],\n\t\t\t(output, len, otype) => onWriteConsole(output, otype)\n\t\t);\n\t\tref.writePointer(libR.ptr_R_WriteConsole, 0, WriteConsole);\n\t\tref.writePointer(libR.ptr_R_WriteConsoleEx, 0, WriteConsoleEx);\n\t}\n\t/**\n\t * Set callback on R's computation.\n\t * @param {function} onBusy\t\t\t\tFunction called on busy/job finish\n\t */\n\toverrideBusy(onBusy){\n\t\tconst Busy = ffi.Callback(\"void\", [\"int\"], (which) => onBusy(which));\n\t\tref.writePointer(libR.ptr_R_Busy, 0, Busy);\n\t}\n\t/**\n\t * Finish using R.\n\t */\n\trelease(){\n\t\tlibR.Rf_endEmbeddedR(0);\n\t}\n\t/**\n\t * Python like range function.\n\t * Be careful, this is not R ':' operator\n\t * range(0, 3) == [0, 1, 2], which is not eq. to 0:3\n\t * @param {integer} a\tfrom\n\t * @param {integer} b\tto (this value won't be included)\n\t * @return {Array}\t\tvalue in a <= x < b. range(0, 3) == [0, 1, 2]\n\t */\n\tstatic range(a, b){\n\t\tlet len = (b - a);\n\t\treturn [...Array(len)].map((e, i) => i + a);\n\t}\n}\n\n/*\n * vim: filetype=javascript\n */\n",
    "static": true,
    "longname": "/Users/kcrt/prog/libr-bridge/R.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "debug",
    "memberof": "libr-bridge/R.mjs",
    "static": true,
    "longname": "libr-bridge/R.mjs~debug",
    "access": "public",
    "export": false,
    "importPath": "libr-bridge/R",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "R_isInitialized",
    "memberof": "libr-bridge/R.mjs",
    "static": true,
    "longname": "libr-bridge/R.mjs~R_isInitialized",
    "access": "public",
    "export": false,
    "importPath": "libr-bridge/R",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "R_GlobalEnv",
    "memberof": "libr-bridge/R.mjs",
    "static": true,
    "longname": "libr-bridge/R.mjs~R_GlobalEnv",
    "access": "public",
    "export": false,
    "importPath": "libr-bridge/R",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "func_cached",
    "memberof": "libr-bridge/R.mjs",
    "static": true,
    "longname": "libr-bridge/R.mjs~func_cached",
    "access": "public",
    "export": false,
    "importPath": "libr-bridge/R",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "libR",
    "memberof": "libr-bridge/R.mjs",
    "static": true,
    "longname": "libr-bridge/R.mjs~libR",
    "access": "public",
    "export": false,
    "importPath": "libr-bridge/R",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "class",
    "name": "R",
    "memberof": "libr-bridge/R.mjs",
    "static": true,
    "longname": "libr-bridge/R.mjs~R",
    "access": "public",
    "export": true,
    "importPath": "libr-bridge/R",
    "importStyle": "R",
    "description": "Class for accessing R via libR.",
    "lineNumber": 23,
    "interface": false
  },
  {
    "__docId__": 55,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "libr-bridge/R.mjs~R",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/R.mjs~R#constructor",
    "access": "public",
    "description": "Constructor function for class R",
    "lineNumber": 27
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "__initializeRfunc",
    "memberof": "libr-bridge/R.mjs~R",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/R.mjs~R#__initializeRfunc",
    "access": "private",
    "description": "Load some R functions.\nPlease do not call manually.",
    "lineNumber": 60,
    "params": [],
    "return": null
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "[e]",
    "memberof": "libr-bridge/R.mjs~R",
    "static": false,
    "longname": "libr-bridge/R.mjs~R#[e]",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "isInitialized",
    "memberof": "libr-bridge/R.mjs~R",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "libr-bridge/R.mjs~R.isInitialized",
    "access": "public",
    "description": "Check whether R class is globally initialized or not.",
    "lineNumber": 71,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true if R is already loaded."
    },
    "params": []
  },
  {
    "__docId__": 59,
    "kind": "get",
    "name": "GlobalEnv",
    "memberof": "libr-bridge/R.mjs~R",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "libr-bridge/R.mjs~R.GlobalEnv",
    "access": "public",
    "description": "Acquire global environment in R.",
    "lineNumber": 78,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "SEXP of global environment."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "get",
    "name": "libR",
    "memberof": "libr-bridge/R.mjs~R",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "libr-bridge/R.mjs~R.libR",
    "access": "public",
    "description": "Initialized libR object for accessing R.",
    "lineNumber": 85,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "libR"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "func",
    "memberof": "libr-bridge/R.mjs~R",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/R.mjs~R#func",
    "access": "public",
    "description": "Acquire bridging function to access R function.\nFunctions receive JavaScript value, and returns JavaScript compatible objects.",
    "examples": [
      "const sum = R.func(\"sum\")\nconsole.log(sum([1, 2, 3]))\t\t// prints 6"
    ],
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of R function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "Bridging function"
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "func_raw",
    "memberof": "libr-bridge/R.mjs~R",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/R.mjs~R#func_raw",
    "access": "public",
    "description": "Acquire bridging function to access R function.\nThis function doesn't convert to/from SEXP.\nReceives SEXPWrap, and returns SEXPWrap. Please use carefully.",
    "see": [
      "{@link R#func}"
    ],
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of R function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "Bridging function"
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "__func_sexp",
    "memberof": "libr-bridge/R.mjs~R",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/R.mjs~R#__func_sexp",
    "access": "private",
    "description": "Find functions in R environment.\nPlease do not call this function manually.",
    "lineNumber": 118,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SEXPWrap"
      ],
      "spread": false,
      "description": "SEXPWrap object of R function"
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "__RFuncBridge_raw",
    "memberof": "libr-bridge/R.mjs~R",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/R.mjs~R#__RFuncBridge_raw",
    "access": "private",
    "description": "Bridging function for R function.\nThis bridging function doesn't handle SEXP.\nPlease do not call this function manually.",
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "_func",
        "description": "SEXPWrap object of R function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SEXPWrap"
      ],
      "spread": false,
      "description": "SEXPWrap object of returned value"
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "__RFuncBridge",
    "memberof": "libr-bridge/R.mjs~R",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/R.mjs~R#__RFuncBridge",
    "access": "private",
    "description": "Bridging function for R function.\nPlease do not call this function manually.",
    "lineNumber": 165,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "SEXPWrap object of R function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "JavaScript compatible returned value"
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "eval_raw",
    "memberof": "libr-bridge/R.mjs~R",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/R.mjs~R#eval_raw",
    "access": "public",
    "description": "Execute R code.",
    "see": [
      "{@link eval}, R_ParseEvalString"
    ],
    "lineNumber": 205,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "R code"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "silent",
        "description": "Suppress error message if true."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SEXPWrap"
      ],
      "spread": false,
      "description": "SEXPWrap object of returned value. Returns undefined on error."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "When execution fails."
      }
    ]
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "__eval_langsxp",
    "memberof": "libr-bridge/R.mjs~R",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/R.mjs~R#__eval_langsxp",
    "access": "private",
    "description": "Execute R code with LANGSXP",
    "lineNumber": 234,
    "params": [
      {
        "name": "langsxp",
        "types": [
          "*"
        ]
      },
      {
        "name": "silent",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "eval_direct",
    "memberof": "libr-bridge/R.mjs~R",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/R.mjs~R#eval_direct",
    "access": "public",
    "description": "Execute R code without error handling. App crashes when execution/parse failure.\nPlease use this function with care.",
    "see": [
      "{@link eval_raw}"
    ],
    "lineNumber": 251,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "R code"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SEXPWrap"
      ],
      "spread": false,
      "description": "SEXPWrap object of returned value. Returns undefined on error."
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "eval",
    "memberof": "libr-bridge/R.mjs~R",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/R.mjs~R#eval",
    "access": "public",
    "description": "Execute R code.",
    "examples": [
      "\tlet value = R.eval(\"sum(c(1, 2, 3))\")\t\t// value will be 6"
    ],
    "lineNumber": 263,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "R code"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "silent",
        "description": "Suppress error message if true."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "JavaScript compatible object of returned value."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "When execution fails."
      }
    ]
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "evalWithTry",
    "memberof": "libr-bridge/R.mjs~R",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/R.mjs~R#evalWithTry",
    "access": "public",
    "description": "Execute R code with R try. This is more safe than {@link R#eval}.",
    "lineNumber": 276,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "R code"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "silent",
        "description": "Suppress error message if true."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Returned value. Returns undefined on error."
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "getVar",
    "memberof": "libr-bridge/R.mjs~R",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/R.mjs~R#getVar",
    "access": "public",
    "description": "Acquire value of R variable",
    "lineNumber": 285,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "varname",
        "description": "Name of variable"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Value in the R variable."
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "getVarNames",
    "memberof": "libr-bridge/R.mjs~R",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/R.mjs~R#getVarNames",
    "access": "public",
    "description": "Acquire names attribute of R variable",
    "lineNumber": 298,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "varname",
        "description": "Name of variable"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Associated name attribute for the specified R variable. If no name, undefined will be returned."
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "setVar",
    "memberof": "libr-bridge/R.mjs~R",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/R.mjs~R#setVar",
    "access": "public",
    "description": "Set value to R variable",
    "lineNumber": 307,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "varname",
        "description": "Name of variable"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Value you want to set to variable."
      }
    ],
    "return": null
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "setVarNames",
    "memberof": "libr-bridge/R.mjs~R",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/R.mjs~R#setVarNames",
    "access": "public",
    "description": "Set names attribute to R variable",
    "lineNumber": 318,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "varname",
        "description": "Name of variable"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Value you want to set to names attributes"
      }
    ],
    "return": null
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "overrideShowMessage",
    "memberof": "libr-bridge/R.mjs~R",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/R.mjs~R#overrideShowMessage",
    "access": "public",
    "description": "Use your own console input/output instead of R's default one.",
    "lineNumber": 326,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "onMessage",
        "description": "Function on showing message"
      }
    ],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "overrideReadConsole",
    "memberof": "libr-bridge/R.mjs~R",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/R.mjs~R#overrideReadConsole",
    "access": "public",
    "description": "Use your own console input/output instead of R's default one.",
    "lineNumber": 334,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "onReadConsole",
        "description": "Function on console read"
      }
    ],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "overrideWriteConsole",
    "memberof": "libr-bridge/R.mjs~R",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/R.mjs~R#overrideWriteConsole",
    "access": "public",
    "description": "Use your own console input/output instead of R's default one.",
    "lineNumber": 357,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "onWriteConsole",
        "description": "Function on console write"
      }
    ],
    "return": null
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "overrideBusy",
    "memberof": "libr-bridge/R.mjs~R",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/R.mjs~R#overrideBusy",
    "access": "public",
    "description": "Set callback on R's computation.",
    "lineNumber": 370,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "onBusy",
        "description": "Function called on busy/job finish"
      }
    ],
    "return": null
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "release",
    "memberof": "libr-bridge/R.mjs~R",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/R.mjs~R#release",
    "access": "public",
    "description": "Finish using R.",
    "lineNumber": 377,
    "params": [],
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "range",
    "memberof": "libr-bridge/R.mjs~R",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "libr-bridge/R.mjs~R.range",
    "access": "public",
    "description": "Python like range function.\nBe careful, this is not R ':' operator\nrange(0, 3) == [0, 1, 2], which is not eq. to 0:3",
    "lineNumber": 388,
    "params": [
      {
        "nullable": null,
        "types": [
          "integer"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "from"
      },
      {
        "nullable": null,
        "types": [
          "integer"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "to (this value won't be included)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "value in a <= x < b. range(0, 3) == [0, 1, 2]"
    }
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "libr-bridge/RObject.mjs",
    "content": "\"use strict\";\n\n// import ref from \"ref\";\n// import refArray from \"ref-array\";\n// import R from \"./R\";\n// import {REALSXP} from \"./libR\";\n// import SEXPWrap from \"./SEXPWrap\";\n\n// import debug_ from \"debug\";\n// const debug = debug_(\"libr-bridge:RObject\");\n\n/**\n * JavaScript class for R Array type.\n * Please use appropriate deriverd class if possible.\n */\nexport class RArray extends Array{\n\t// nothing special.\n}\nexport class RIntArray extends RArray{\n}\nexport class RBoolArray extends RArray{\n}\nexport class RStrArray extends RArray{\n}\nexport class RRealArray extends RArray{\n}\nexport class RComplexArray extends RArray{\n}\n/**\n * JavaScript class for R Factor type.\n * A factor has numerical(integer) array with keys.\n */\nexport class RFactor extends RArray{\n\t/**\n\t * Create a factor.\n\t *\t@param data {string[]}\t\tString array indicate category, like [\"male\", \"female\", \"male\", ...]\n\t *\t@param levels {Object}\t\tCategory item like [\"male\", \"female\"]\n\t *\t@param ordered {boolean}\tIf true, this factor is ordered factor (nominal)\n\t */\n\tconstructor(data, levels=undefined, ordered=false){\n\n\t\tvar mylevels;\n\n\t\tif(!Array.isArray(data)){\n\t\t\tsuper(data);\n\t\t}else{\n\t\t\tif(levels === undefined){\n\t\t\t\tvar s = new Set();\n\t\t\t\tdata.forEach((item) => s.add(item));\n\t\t\t\tmylevels = Array.from(s);\n\t\t\t}else if(Array.isArray(levels)){\n\t\t\t\tmylevels = levels;\n\t\t\t}else{\n\t\t\t\tthrow new Error(\"Unknown label of factor.\");\n\t\t\t}\n\t\t\tmylevels = mylevels.filter((v) => v !== undefined);\n\n\t\t\t// RFactor is 1-origin!\n\t\t\tconst values = data.map((v) => mylevels.indexOf(v) + 1)\n\t\t\t\t.map((v) => v === 0 ? undefined : v); \n\n\t\t\tsuper(...values);\n\t\t}\n\t\tthis.levels = mylevels;\n\t\tthis.ordered = ordered;\n\n\t}\n}\n\n\n/**\n * JavaScript class for R Data Frame type.\n * With a data frame, we can  is able to contain different type of items.\n */\nexport class RList extends Array{\n\tconstructor(data){\n\t\tconsole.assert(Array.isArray(data));\n\n\t\t// JavaScript Array can contain dirrent type of items, so do nothing special.\n\t\t// However, array with 1-numerical item cannot be made with normal way.\n\t\tif(data.length === 1 && typeof(data[0]) === \"number\"){\n\t\t\tsuper(1984, data[0]);\n\t\t\tthis.pop();\n\t\t}else{\n\t\t\tsuper(...data);\n\t\t}\n\t}\n}\n\n\n\n/*\n * vim: filetype=javascript\n */\n",
    "static": true,
    "longname": "/Users/kcrt/prog/libr-bridge/RObject.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "class",
    "name": "RArray",
    "memberof": "libr-bridge/RObject.mjs",
    "static": true,
    "longname": "libr-bridge/RObject.mjs~RArray",
    "access": "public",
    "export": true,
    "importPath": "libr-bridge/RObject",
    "importStyle": "{RArray}",
    "description": "JavaScript class for R Array type.\nPlease use appropriate deriverd class if possible.",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "Array"
    ]
  },
  {
    "__docId__": 83,
    "kind": "class",
    "name": "RIntArray",
    "memberof": "libr-bridge/RObject.mjs",
    "static": true,
    "longname": "libr-bridge/RObject.mjs~RIntArray",
    "access": "public",
    "export": true,
    "importPath": "libr-bridge/RObject",
    "importStyle": "{RIntArray}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "interface": false,
    "extends": [
      "RArray"
    ]
  },
  {
    "__docId__": 84,
    "kind": "class",
    "name": "RBoolArray",
    "memberof": "libr-bridge/RObject.mjs",
    "static": true,
    "longname": "libr-bridge/RObject.mjs~RBoolArray",
    "access": "public",
    "export": true,
    "importPath": "libr-bridge/RObject",
    "importStyle": "{RBoolArray}",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "interface": false,
    "extends": [
      "RArray"
    ]
  },
  {
    "__docId__": 85,
    "kind": "class",
    "name": "RStrArray",
    "memberof": "libr-bridge/RObject.mjs",
    "static": true,
    "longname": "libr-bridge/RObject.mjs~RStrArray",
    "access": "public",
    "export": true,
    "importPath": "libr-bridge/RObject",
    "importStyle": "{RStrArray}",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "interface": false,
    "extends": [
      "RArray"
    ]
  },
  {
    "__docId__": 86,
    "kind": "class",
    "name": "RRealArray",
    "memberof": "libr-bridge/RObject.mjs",
    "static": true,
    "longname": "libr-bridge/RObject.mjs~RRealArray",
    "access": "public",
    "export": true,
    "importPath": "libr-bridge/RObject",
    "importStyle": "{RRealArray}",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "interface": false,
    "extends": [
      "RArray"
    ]
  },
  {
    "__docId__": 87,
    "kind": "class",
    "name": "RComplexArray",
    "memberof": "libr-bridge/RObject.mjs",
    "static": true,
    "longname": "libr-bridge/RObject.mjs~RComplexArray",
    "access": "public",
    "export": true,
    "importPath": "libr-bridge/RObject",
    "importStyle": "{RComplexArray}",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "interface": false,
    "extends": [
      "RArray"
    ]
  },
  {
    "__docId__": 88,
    "kind": "class",
    "name": "RFactor",
    "memberof": "libr-bridge/RObject.mjs",
    "static": true,
    "longname": "libr-bridge/RObject.mjs~RFactor",
    "access": "public",
    "export": true,
    "importPath": "libr-bridge/RObject",
    "importStyle": "{RFactor}",
    "description": "JavaScript class for R Factor type.\nA factor has numerical(integer) array with keys.",
    "lineNumber": 33,
    "interface": false,
    "extends": [
      "RArray"
    ]
  },
  {
    "__docId__": 89,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "libr-bridge/RObject.mjs~RFactor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/RObject.mjs~RFactor#constructor",
    "access": "public",
    "description": "Create a factor.",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "{string[]}\t\tString array indicate category, like [\"male\", \"female\", \"male\", ...]"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "levels",
        "description": "{Object}\t\tCategory item like [\"male\", \"female\"]"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ordered",
        "description": "{boolean}\tIf true, this factor is ordered factor (nominal)"
      }
    ]
  },
  {
    "__docId__": 90,
    "kind": "member",
    "name": "levels",
    "memberof": "libr-bridge/RObject.mjs~RFactor",
    "static": false,
    "longname": "libr-bridge/RObject.mjs~RFactor#levels",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "member",
    "name": "ordered",
    "memberof": "libr-bridge/RObject.mjs~RFactor",
    "static": false,
    "longname": "libr-bridge/RObject.mjs~RFactor#ordered",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "class",
    "name": "RList",
    "memberof": "libr-bridge/RObject.mjs",
    "static": true,
    "longname": "libr-bridge/RObject.mjs~RList",
    "access": "public",
    "export": true,
    "importPath": "libr-bridge/RObject",
    "importStyle": "{RList}",
    "description": "JavaScript class for R Data Frame type.\nWith a data frame, we can  is able to contain different type of items.",
    "lineNumber": 75,
    "interface": false,
    "extends": [
      "Array"
    ]
  },
  {
    "__docId__": 93,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "libr-bridge/RObject.mjs~RList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/RObject.mjs~RList#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "libr-bridge/SEXPWrap.mjs",
    "content": "\"use strict\";\nimport ref from \"ref\";\nimport Complex from \"Complex\";\nimport R from \"./R\";\nimport {SEXPTYPE, ComplexInR, cetype_t} from \"./libR\";\nimport { RFactor, RArray, RBoolArray, RStrArray, RIntArray, RRealArray, RComplexArray } from \"./RObject\";\nimport debug_ from \"debug\";\nconst debug = debug_(\"libr-bridge:class SEXPWrap\");\n\nvar sexpSize = void 0;\n\nexport default class SEXPWrap {\n\tconstructor(value){\n\t\t\n\t\tif(value instanceof Buffer){\n\t\t\t// This may be SEXP!\n\t\t\tthis.sexp = value;\n\t\t}else{\n\t\t\tthis.__initializeWithValue(value);\n\t\t}\n\t}\n\t/**\n\t *\tInitialize this instance with specified value.\n\t *\t@private\n\t */\n\t__initializeWithValue(value){\n\n\t\tif(!Array.isArray(value)){\n\t\t\t// not an array.\n\t\t\t// convert to array and try again.\n\t\t\t// (You can use Rf_mkString, Rf_ScalarReal, Rf_ScalarLogical if you don't want SEXPWrap)\n\t\t\treturn this.__initializeWithValue([value]);\n\t\t}else if(value.length == 0){\n\t\t\tthis.sexp = R.R_NilValue;\n\t\t}\n\n\t\tif(!(value instanceof RArray)){\n\t\t\t// Javascript normal array.\n\t\t\t// Need to determine type of array.\n\t\t\tif(typeof(value[0]) == \"number\" || value[0] === void 0){\n\t\t\t\tvalue = RRealArray.of(...value);\n\t\t\t}else if(typeof(value[0]) == \"boolean\"){\n\t\t\t\tvalue = RBoolArray.of(...value);\n\t\t\t}else if(typeof(value[0]) == \"string\"){\n\t\t\t\tvalue = RStrArray.of(...value);\n\t\t\t}else if(value[0] instanceof Complex){\n\t\t\t\tvalue = RComplexArray.of(...value);\n\t\t\t}else{\n\t\t\t\tthrow new Error(\"Unknown type of array.\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(value instanceof RFactor || value instanceof RIntArray){\n\t\t\t// Factor is actually an 1-origin integers with attributes.\n\t\t\tthis.sexp = R.libR.Rf_allocVector(SEXPTYPE.INTSXP, value.length);\n\t\t\tthis.protect();\n\t\t\tlet p = ref.reinterpret(this.dataptr(), ref.types.int.size * value.length);\n\t\t\tvalue.map((e, i) => {\n\t\t\t\tref.set(\n\t\t\t\t\tp, ref.types.int.size * i,\n\t\t\t\t\te === void 0 ? R.R_NaInt : e, ref.types.int\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tif(value instanceof RFactor){\n\t\t\t\t// add atribute\n\t\t\t\tthis.setAttribute(\"class\", value.ordered ? [\"factor\", \"ordered\"] : \"factor\");\n\t\t\t\tthis.setAttribute(\"levels\", value.levels);\n\t\t\t}\n\t\t\tthis.unprotect();\n\t\t}else if(value instanceof RRealArray){\n\t\t\t// assume this is array of numbers (e.g. [1, 2, 3, ...])\n\t\t\tthis.sexp = R.libR.Rf_allocVector(SEXPTYPE.REALSXP, value.length);\n\t\t\tthis.protect();\n\t\t\tlet p = ref.reinterpret(this.dataptr(), ref.types.double.size * value.length);\n\t\t\tvalue.map((e, i) => {\n\t\t\t\tref.set(p, ref.types.double.size * i, 1.0 * e /* convert to double */, ref.types.double);\n\t\t\t});\n\t\t\t// Find NA and set 1954. (sizeof(double) = sizeof(int) * 2)\n\t\t\tp = ref.reinterpret(this.dataptr(), ref.types.int.size * 2 * value.length);\n\t\t\tvalue.map((e, i) => {\n\t\t\t\tif(e === void 0){ ref.set(p, ref.types.int.size * i * 2, 1954, ref.types.int); }\n\t\t\t});\n\t\t\tthis.unprotect();\n\t\t}else if(value instanceof RBoolArray){\n\t\t\t// assume this is array of boolean (e.g. [false, true, true, ...])\n\t\t\t// to handle NA, we use int instead of bool.\n\t\t\tthis.sexp = R.libR.Rf_allocVector(SEXPTYPE.LGLSXP, value.length);\n\t\t\tthis.protect();\n\t\t\tlet p = ref.reinterpret(this.dataptr(), ref.types.int.size * value.length);\n\t\t\tvalue.map((e, i) => {\n\t\t\t\tlet value;\n\t\t\t\tif(e === void 0){\n\t\t\t\t\t// It's NA\n\t\t\t\t\tvalue = R.R_NaInt;\n\t\t\t\t}else{\n\t\t\t\t\tvalue = e ? 1 : 0;\n\t\t\t\t}\n\t\t\t\tref.set(p, ref.types.int.size * i, value, ref.types.int);\n\t\t\t});\n\t\t\tthis.unprotect();\n\t\t}else if(value instanceof RStrArray){\n\t\t\t// assuming this is array of strings (e.g. [\"abc\", \"def\", ...])\n\t\t\tthis.sexp = R.libR.Rf_allocVector(SEXPTYPE.STRSXP, value.length);\n\t\t\tthis.protect();\n\t\t\tvalue.map((e, i) => {\n\t\t\t\tif(e !== void 0){\n\t\t\t\t\tR.libR.SET_STRING_ELT(this.sexp, i, R.libR.Rf_mkCharCE(e, cetype_t.CE_UTF8));\n\t\t\t\t}else{\n\t\t\t\t\tR.libR.SET_STRING_ELT(this.sexp, i, R.R_NaString.sexp);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.unprotect();\n\t\t}else if(value instanceof RComplexArray){\n\t\t\tthis.sexp = R.libR.Rf_allocVector(SEXPTYPE.CPLXSXP, value.length);\n\t\t\tthis.protect();\n\t\t\tlet p = ref.reinterpret(this.dataptr(), ComplexInR.size * value.length);\n\t\t\tvalue.map(\n\t\t\t\t(e) => new ComplexInR({r: e.real, i: e.im})).map(\n\t\t\t\t(e, i) => {\n\t\t\t\t\tref.set(p, ComplexInR.size * i, e, ComplexInR);\n\t\t\t\t});\n\t\t\tthis.unprotect();\n\t\t}else{\n\t\t\tconsole.log(\"Cannot convert \" + typeof(value) + \" in JavaScript to R SEXP / \" + value);\n\t\t}\n\t}\n\t/** Protect this SEXP */\n\tprotect(){ R.libR.Rf_protect(this.sexp); }\n\t/** Unprotect SEXPs */\n\tstatic unprotect(depth=1){ R.libR.Rf_unprotect(depth); }\n\tunprotect(depth=1){ R.libR.Rf_unprotect(depth); }\n\t/** Preserve this SEXP. Please use protect() if you can. */\n\tpreserve(){ R.libR.R_PreserveObject(this.sexp); }\n\t/** Release preserved SEXP. protect()ed SEXP should be released with unprotect() */\n\trelease(){ R.libR.R_ReleaseObject(this.sexp); }\n\t/** Return true if this SEXP is List. */\n\tisList(){ return R.libR.Rf_isList(this.sexp); }\n\t/** Return true if this SEXP is Vector. Please note single scalar value in R is vector. */\n\tisVector(){ return R.libR.Rf_isVector(this.sexp); }\n\t/** Return the length of vector. */\n\tlength(){ return R.libR.Rf_length(this.sexp); }\n\t/** Return true if this SEXP is null. */\n\tisNull(){ return R.libR.Rf_isNull(this.sexp); }\n\tisComplex(){ return R.libR.Rf_isComplex(this.sexp); }\n\tisExpression(){ return R.libR.Rf_isExpression(this.sexp); }\n\tisInteger(){ return R.libR.Rf_isInteger(this.sexp); }\n\tisLogical(){ return R.libR.Rf_isLogical(this.sexp); }\n\tisReal(){ return R.libR.Rf_isReal(this.sexp); }\n\tisValidString(){ return R.libR.Rf_isValidString(this.sexp); }\n\tisFactor(){ return R.libR.Rf_isFactor(this.sexp); }\n\tdataptr(){ return R.libR.DATAPTR(this.sexp); }\n\tasChar(){\n\t\tif(this.sexp.address() == R.R_NaString.sexp.address()){ return void 0;}\n\t\tif(this.sexp.address() == R.R_BlankString.sexp.address()){ return \"\";}\n\t\treturn R.libR.Rf_translateCharUTF8(R.libR.Rf_asChar(this.sexp)).slice();\n\t}\n\t/** Return sizeof(SEXP) in byte. */\n\tstatic get SEXPSize(){\n\t\tif(sexpSize == void 0){\n\t\t\tconst intSEXP = new SEXPWrap(0);\n\t\t\tsexpSize = intSEXP.dataptr().address() - intSEXP.sexp.address();\n\t\t}\n\t\treturn sexpSize;\n\t}\n\tget names(){\n\t\tlet names = new SEXPWrap(R.libR.Rf_getAttrib(this.sexp, R.R_NamesSymbol));\n\t\treturn names.isNull() ? undefined : names.getValue();\n\t}\n\tset names(newtag){\n\t\tif (newtag === void 0) return;\n\t\tR.libR.Rf_setAttrib(this.sexp, R.R_NamesSymbol, (new SEXPWrap(newtag)).sexp);\n\t}\n\t/** set attr of this variable. */\n\tsetAttribute(attrname, newattr){\n\t\tconst attrsymbol = R.libR.Rf_install(attrname);\n\t\tR.libR.Rf_setAttrib(this.sexp, attrsymbol, (new SEXPWrap(newattr)).sexp);\n\t}\n\t/** get attr of this variable. */\n\tgetAttribute(attrname){\n\t\tconst attrvalue = new SEXPWrap(this._getAttribute_raw(attrname));\n\t\treturn attrvalue.getValue();\n\t}\n\t/** get attr SEXP of this variable. */\n\t_getAttribute_raw(attrname){\n\t\tconst attrsymbol = R.libR.Rf_install(attrname);\n\t\treturn R.libR.Rf_getAttrib(this.sexp, attrsymbol);\n\t}\n\tgetValue(){\n\t\tif(this.sexp.address() == 0 || this.isNull()){\n\t\t\treturn null;\n\t\t}\n\t\tconst len = this.length();\n\t\tif(len == 0){\n\t\t\treturn [];\n\t\t}if(this.isList()){\n\t\t\t// TODO: support this\n\t\t\t/*\n\t\t\tlet v = this.sexp;\n\t\t\treturn R.range(0, len).map( (e) => {\n\t\t\t\tlet a = R.libR.CAR(v);\n\t\t\t\tv = R.libR.CDR(v);\n\t\t\t\treturn this._getValue_scalar(a);\n\t\t\t});*/\n\t\t\tconsole.log(\"LIST NOT SUPPORTED\");\n\t\t\treturn undefined;\n\t\t}else if(this.isVector()){\t\t// be careful; is.vector(1) is even True\n\t\t\tlet itemtype;\n\t\t\tlet values = [];\n\t\t\tif(this.isInteger() || this.isLogical() || this.isFactor()){\n\t\t\t\titemtype = ref.types.int;\n\t\t\t\tconst f = this.isLogical() ? (e) => !!e : (e) => e;\n\t\t\t\tconst p = ref.reinterpret(this.dataptr(), itemtype.size * len);\n\t\t\t\tvalues = R.range(0, len).map( (i) => ref.get(p, itemtype.size * i, itemtype) )\n\t\t\t\t\t.map( (e) => e == R.R_NaInt ? undefined : f(e));\n\t\t\t\tif(this.isFactor()){\n\t\t\t\t\tconst levels = this.getAttribute(\"levels\");\n\t\t\t\t\tconst class_ = this.getAttribute(\"class\");\n\t\t\t\t\tconst isOrdered = Array.isArray(class_) && class_.indexOf(\"ordered\") !== -1;\n\t\t\t\t\tvalues = new RFactor(values.map((v) => levels[v - 1]), levels, isOrdered);\n\t\t\t\t}\n\t\t\t}else if(this.isReal()){\n\t\t\t\titemtype = ref.types.double;\n\t\t\t\tconst p = ref.reinterpret(this.dataptr(), itemtype.size * len);\n\t\t\t\tvalues = R.range(0, len).map( (i) => ref.get(p, itemtype.size * i, itemtype) );\n\t\t\t\t/* Discriminate NA from NaN (1954; the year Ross Ihaka was born) */\n\t\t\t\t/* see main/arithmetic.c for detail. */\n\t\t\t\titemtype = ref.types.uint;\n\t\t\t\tconst q = ref.reinterpret(this.dataptr(), itemtype.size * len * 2);\n\t\t\t\tR.range(0, len).map( (i) => {\n\t\t\t\t\tif(isNaN(values[i])){\n\t\t\t\t\t\tif(ref.get(q, itemtype.size * i * 2, itemtype) == 1954) values[i] = undefined;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}else if(this.isComplex()){\n\t\t\t\titemtype = ComplexInR;\n\t\t\t\tconst p = ref.reinterpret(this.dataptr(), itemtype.size * len);\n\t\t\t\tvalues = R.range(0, len).map( (i) => ref.get(p, itemtype.size * i, itemtype))\n\t\t\t\t\t.map( (e) => new Complex(e.r, e.i));\n\t\t\t}else if(this.isValidString()){\n\t\t\t\tvalues = R.range(0, len).map((i) => R.libR.STRING_ELT(this.sexp, i))\n\t\t\t\t\t.map((e) => {\n\t\t\t\t\t\tconst s = new SEXPWrap(e);\n\t\t\t\t\t\treturn s.asChar();\n\t\t\t\t\t});\n\t\t\t}else if(this.isExpression()){\n\t\t\t\tdebug(\"getValue() for RExpression\");\n\t\t\t\tvalues = [\"(R Expression)\"];\n\t\t\t}else{\n\t\t\t\tvalues = [\"Unsupported vector item!\"];\n\t\t\t}\n\t\t\treturn values.length == 1 ? values[0] : values;\n\t\t}else{\n\t\t\treturn \"unknown type!\";\n\t\t}\n\t}\n\t_getValue_scalar(sexp){\n\t\t// 'Number' includes complex, 'Vector' includes Array and Matrix\n\t\tif(R.libR.Rf_isInteger(sexp)){\n\t\t\treturn R.libR.Rf_asInteger(sexp);\n\t\t}else if(R.libR.Rf_isNumeric(sexp)){\n\t\t\treturn R.libR.Rf_asReal(sexp);\n\t\t}else if(R.libR.Rf_isValidString(sexp)){\n\t\t\treturn R.libR.Rf_translateCharUTF8(R.libR.Rf_asChar(sexp)).slice();\n\t\t}else{\n\t\t\treturn \"SEXPWRAP: unknown SEXP Type\";\n\t\t}\n\t}\n}\n\n/*\n * vim: filetype=javascript\n */\n",
    "static": true,
    "longname": "/Users/kcrt/prog/libr-bridge/SEXPWrap.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "debug",
    "memberof": "libr-bridge/SEXPWrap.mjs",
    "static": true,
    "longname": "libr-bridge/SEXPWrap.mjs~debug",
    "access": "public",
    "export": false,
    "importPath": "libr-bridge/SEXPWrap",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 96,
    "kind": "variable",
    "name": "sexpSize",
    "memberof": "libr-bridge/SEXPWrap.mjs",
    "static": true,
    "longname": "libr-bridge/SEXPWrap.mjs~sexpSize",
    "access": "public",
    "export": false,
    "importPath": "libr-bridge/SEXPWrap",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 97,
    "kind": "class",
    "name": "SEXPWrap",
    "memberof": "libr-bridge/SEXPWrap.mjs",
    "static": true,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "access": "public",
    "export": true,
    "importPath": "libr-bridge/SEXPWrap",
    "importStyle": "SEXPWrap",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 98,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "sexp",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#sexp",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "__initializeWithValue",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#__initializeWithValue",
    "access": "private",
    "description": "Initialize this instance with specified value.",
    "lineNumber": 26,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "protect",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#protect",
    "access": "public",
    "description": "Protect this SEXP",
    "lineNumber": 129,
    "params": [],
    "return": null
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "unprotect",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap.unprotect",
    "access": "public",
    "description": "Unprotect SEXPs",
    "lineNumber": 131,
    "params": [
      {
        "name": "depth",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      }
    ],
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "unprotect",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#unprotect",
    "access": "public",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "params": [
      {
        "name": "depth",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      }
    ],
    "return": null
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "preserve",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#preserve",
    "access": "public",
    "description": "Preserve this SEXP. Please use protect() if you can.",
    "lineNumber": 134,
    "params": [],
    "return": null
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "release",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#release",
    "access": "public",
    "description": "Release preserved SEXP. protect()ed SEXP should be released with unprotect()",
    "lineNumber": 136,
    "params": [],
    "return": null
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "isList",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#isList",
    "access": "public",
    "description": "Return true if this SEXP is List.",
    "lineNumber": 138,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "isVector",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#isVector",
    "access": "public",
    "description": "Return true if this SEXP is Vector. Please note single scalar value in R is vector.",
    "lineNumber": 140,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "length",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#length",
    "access": "public",
    "description": "Return the length of vector.",
    "lineNumber": 142,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "isNull",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#isNull",
    "access": "public",
    "description": "Return true if this SEXP is null.",
    "lineNumber": 144,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "isComplex",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#isComplex",
    "access": "public",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "isExpression",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#isExpression",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "isInteger",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#isInteger",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "isLogical",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#isLogical",
    "access": "public",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "isReal",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#isReal",
    "access": "public",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "isValidString",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#isValidString",
    "access": "public",
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "isFactor",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#isFactor",
    "access": "public",
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "dataptr",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#dataptr",
    "access": "public",
    "description": null,
    "lineNumber": 152,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "asChar",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#asChar",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "get",
    "name": "SEXPSize",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap.SEXPSize",
    "access": "public",
    "description": "Return sizeof(SEXP) in byte.",
    "lineNumber": 159,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "get",
    "name": "names",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#names",
    "access": "public",
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "set",
    "name": "names",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#names",
    "access": "public",
    "description": null,
    "lineNumber": 170,
    "undocument": true
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "setAttribute",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#setAttribute",
    "access": "public",
    "description": "set attr of this variable.",
    "lineNumber": 175,
    "params": [
      {
        "name": "attrname",
        "types": [
          "*"
        ]
      },
      {
        "name": "newattr",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "getAttribute",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#getAttribute",
    "access": "public",
    "description": "get attr of this variable.",
    "lineNumber": 180,
    "params": [
      {
        "name": "attrname",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "_getAttribute_raw",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#_getAttribute_raw",
    "access": "private",
    "description": "get attr SEXP of this variable.",
    "lineNumber": 185,
    "params": [
      {
        "name": "attrname",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "getValue",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#getValue",
    "access": "public",
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "_getValue_scalar",
    "memberof": "libr-bridge/SEXPWrap.mjs~SEXPWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "libr-bridge/SEXPWrap.mjs~SEXPWrap#_getValue_scalar",
    "access": "private",
    "description": null,
    "lineNumber": 257,
    "undocument": true,
    "params": [
      {
        "name": "sexp",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "file",
    "name": "libr-bridge/develop.mjs",
    "content": "\"use strict\";\nimport R from \"./R\";\nimport { RFactor } from \"./RObject\";\n\n/* Execute this script with:\n *   node -r @std/esm example.mjs\n *     or \n *   node --experimental-modules example.mjs\n * If something is wrong, try with:\n *   DEBUG=libr-bridge:* node -r @std/esm example.mjs\n */\n\nlet r = new R();\n\nconst fac = new RFactor([\"apple\", \"banana\", \"apple\", \"orange\"], void 0, true);\nr.setVar(\"facvar\", fac);\nr.evalWithTry(\"print(attr(facvar, \\\"class\\\"))\");\nr.evalWithTry(\"print(attr(facvar, \\\"levels\\\"))\");\nr.evalWithTry(\"print(typeof(attr(facvar, \\\"levels\\\")))\");\nr.evalWithTry(\"print(typeof(facvar))\");\nr.evalWithTry(\"print(facvar)\");\n\nconst a = r.getVar(\"facvar\");\nconsole.log(a);\n\n/*\n * vim: filetype=javascript\n */\n",
    "static": true,
    "longname": "/Users/kcrt/prog/libr-bridge/develop.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 134,
    "kind": "variable",
    "name": "r",
    "memberof": "libr-bridge/develop.mjs",
    "static": true,
    "longname": "libr-bridge/develop.mjs~r",
    "access": "public",
    "export": false,
    "importPath": "libr-bridge/develop",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "libr-bridge/R.mjs~R"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "name": "fac",
    "memberof": "libr-bridge/develop.mjs",
    "static": true,
    "longname": "libr-bridge/develop.mjs~fac",
    "access": "public",
    "export": false,
    "importPath": "libr-bridge/develop",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "libr-bridge/RObject.mjs~RFactor"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 136,
    "kind": "variable",
    "name": "a",
    "memberof": "libr-bridge/develop.mjs",
    "static": true,
    "longname": "libr-bridge/develop.mjs~a",
    "access": "public",
    "export": false,
    "importPath": "libr-bridge/develop",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 137,
    "kind": "file",
    "name": "libr-bridge/example.mjs",
    "content": "\"use strict\";\nimport R from \"./R\";\n\n/* Execute this script with:\n *   node -r @std/esm example.mjs\n *     or \n *   node --experimental-modules example.mjs\n * If something is wrong, try with:\n *   DEBUG=libr-bridge:* node -r @std/esm example.mjs\n */\n\nlet r = new R();\n\nconst arrA = [1.00, 3.36, 8.01, 1.22, 3.74, 2.43, 7.95, 8.32, 7.45, 4.36];\nconst arrB = [1.04, 3.65, 6.82, 1.46, 2.70, 2.49, 7.48, 8.28, 8.93, 5.63];\n\n/* Some functions are already loaded to libr-bridge */\nconsole.log(\"Mean of arrA: \" + r.mean(arrA));\nconsole.log(\"Mean of arrB: \" + r.mean(arrB));\nconsole.log(\"Peason's correlation coefficient: \" + r.cor(arrA, arrB));\n//TODO: r['wilcox.test'](arrA, arrB);\n\n/* You can pass data to R */\nr.setVar(\"a\", arrA);\n\n/* And data can be used in R */\nconsole.log(r.eval(\"sum(a)\"));\nr.eval(\"b <- a / 2\");\nconsole.log(r.eval(\"b\"));\n\n/* You can receive data from R */\nconst b = r.getVar(\"b\");\nconsole.log(b);\n\n/* Execute complex command with eval. */\nr.eval(`\n\tmyfactorial <- function(x) {\n\t\tif (x == 0) {\n\t\t\treturn(1)\n\t\t} else {\n\t\t\treturn(x * myfactorial(x - 1))\n\t\t}\n\t}\n`);\nlet factorial_50 = r.func(\"myfactorial\")(50);\nconsole.log(factorial_50);\n\n\n/*\n * vim: filetype=javascript\n */\n",
    "static": true,
    "longname": "/Users/kcrt/prog/libr-bridge/example.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 138,
    "kind": "variable",
    "name": "r",
    "memberof": "libr-bridge/example.mjs",
    "static": true,
    "longname": "libr-bridge/example.mjs~r",
    "access": "public",
    "export": false,
    "importPath": "libr-bridge/example",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "libr-bridge/R.mjs~R"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 139,
    "kind": "variable",
    "name": "arrA",
    "memberof": "libr-bridge/example.mjs",
    "static": true,
    "longname": "libr-bridge/example.mjs~arrA",
    "access": "public",
    "export": false,
    "importPath": "libr-bridge/example",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "number[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "name": "arrB",
    "memberof": "libr-bridge/example.mjs",
    "static": true,
    "longname": "libr-bridge/example.mjs~arrB",
    "access": "public",
    "export": false,
    "importPath": "libr-bridge/example",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "number[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 141,
    "kind": "variable",
    "name": "b",
    "memberof": "libr-bridge/example.mjs",
    "static": true,
    "longname": "libr-bridge/example.mjs~b",
    "access": "public",
    "export": false,
    "importPath": "libr-bridge/example",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 142,
    "kind": "variable",
    "name": "factorial_50",
    "memberof": "libr-bridge/example.mjs",
    "static": true,
    "longname": "libr-bridge/example.mjs~factorial_50",
    "access": "public",
    "export": false,
    "importPath": "libr-bridge/example",
    "importStyle": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 143,
    "kind": "file",
    "name": "libr-bridge/index.js",
    "content": "module.exports = require(\"esm\")(module)(\"./R.mjs\").default;\n",
    "static": true,
    "longname": "/Users/kcrt/prog/libr-bridge/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "file",
    "name": "libr-bridge/index.mjs",
    "content": "\"use strict\";\nimport R from \"./R\";\nexport default R;\n",
    "static": true,
    "longname": "/Users/kcrt/prog/libr-bridge/index.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 145,
    "kind": "file",
    "name": "libr-bridge/libR.mjs",
    "content": "\"use strict\";\nimport child_process from \"child_process\";\nimport process from \"process\";\nimport path from \"path\";\n\nimport ffi from \"ffi\";\nimport ref from \"ref\";\nimport refArray from \"ref-array\";\nimport refStruct from \"ref-struct\";\n\nimport { default as windowsRegistry } from \"./safe-windows-registry.js\";\n\nimport debug_ from \"debug\";\nconst debug = debug_(\"libr-bridge:libR\");\n\n/* Type */\nconst stringArr = refArray(ref.types.CString);\t\t\t// char * [] or string[]\nexport const SEXP = ref.refType(ref.types.void);\nexport const SEXPREC_ALIGN_SIZE = ref.types.double.size;\nexport const ComplexInR = refStruct({\n\tr: ref.types.double,\n\ti: ref.types.double\n});\n\n/** R SEXP type enums */\nexport const SEXPTYPE = {\n\tNILSXP\t\t: 0,\t/* nil : NULL */\n\tSYMSXP\t\t: 1,\t/* symbols */\n\tLISTSXP\t\t: 2,\t/* lists of dotted pairs */\n\tCLOSXP\t\t: 3,\t/* closures */\n\tENVSXP\t\t: 4,\t/* environments */\n\tPROMSXP\t\t: 5,\t/* promises: [un]evaluated closure arguments */\n\tLANGSXP\t\t: 6,\t/* language constructs (special lists) */\n\tSPECIALSXP\t: 7,\t/* special forms */\n\tBUILTINSXP\t: 8,\t/* builtin non-special forms */\n\tCHARSXP\t\t: 9,\t/* \"scalar\" string type (internal only)*/\n\tLGLSXP\t\t: 10,\t/* logical vectors */\n\tINTSXP\t\t: 13,\t/* integer vectors */\n\tREALSXP\t\t: 14,\t/* real variables */\n\tCPLXSXP\t\t: 15,\t/* complex variables */\n\tSTRSXP\t\t: 16,\t/* string vectors */\n\tDOTSXP\t\t: 17,\t/* dot-dot-dot object */\n\tANYSXP\t\t: 18,\t/* make \"any\" args work */\n\tVECSXP\t\t: 19,\t/* generic vectors */\n\tEXPRSXP\t\t: 20,\t/* expressions vectors */\n\tBCODESXP\t: 21,\t/* byte code */\n\tEXTPTRSXP\t: 22,\t/* external pointer */\n\tWEAKREFSXP\t: 23,\t/* weak reference */\n\tRAWSXP\t\t: 24,\t/* raw bytes */\n\tS4SXP\t\t: 25,\t/* S4 non-vector */\n\tNEWSXP\t\t: 30,   /* fresh node creaed in new page */\n\tFREESXP\t\t: 31,   /* node released by GC */\n\tFUNSXP\t\t: 99\t/* Closure or Builtin */\n};\n\nexport const ParseStatus = {\n\tPARSE_NULL: 0,\n\tPARSE_OK: 1,\n\tPARSE_INCOMPLETE: 2,\n\tPARSE_ERROR: 3,\n\tPARSE_EOF: 4\n};\n\nexport const cetype_t = {\n\tCE_NATIVE : 0,\n\tCE_UTF8   : 1,\n\tCE_LATIN1 : 2,\n\tCE_BYTES  : 3,\n\tCE_SYMBOL : 5,\n\tCE_ANY    : 99\n};\n\nconst apiList = {\n\t\"CAR\": [SEXP, [SEXP]], \n\t\"CDR\": [SEXP, [SEXP]],\n\t\"NAMED\": [\"int\", [SEXP]],\n\t\"R_CHAR\": [\"string\", [SEXP]],\n\t\"R_curErrorBuf\": [\"string\", []],\n\t\"R_NilValue\": [SEXP, []],\n\t// \"R_ParseEvalString\": [SEXP, [\"string\", SEXP]],\t- I don't know why, but Windows dll doesn't have this function.\n\t\"R_ParseVector\": [SEXP, [SEXP, \"int\", \"int*\", SEXP]], // SEXP R_ParseVector(SEXP text, int n, ParseStatus *status, SEXP srcfile)\n\t\"R_PreserveObject\": [\"void\", [SEXP]],\n\t\"R_ReleaseObject\": [\"void\", [SEXP]],\n\t\"R_setStartTime\": [\"void\", []],\t\t\t\t\t\t// void R_setStartTime(void);\n\t// \"R_sysframe\": [SEXP, [\"int\", \"pointer\"]],\n\t\"R_tryEval\": [SEXP, [SEXP, SEXP, \"int*\"]],\t\t\t// SEXP R_tryEval(SEXP e, SEXP env, int *ErrorOccurred)\n\t\"R_tryEvalSilent\": [SEXP, [SEXP, SEXP, \"int*\"]],\t// SEXP R_tryEvalSilent(SEXP e, SEXP env, int *ErrorOccurred)\n\t\"Rf_GetRowNames\": [SEXP, [SEXP]],\n\t\"Rf_ScalarInteger\": [SEXP, [\"int\"]],\n\t\"Rf_ScalarLogical\": [SEXP, [\"int\"]],\n\t\"Rf_ScalarReal\": [SEXP, [\"double\"]],\t\t\t\t// SEXP ScalarReal(double x)\t\n\t\"Rf_allocVector\": [SEXP, [\"int\", \"int\"]],\t\t\t// SEXP Rf_allocVector(SEXPTYPE, int R_xlen_t);\n\t\"Rf_asChar\": [SEXP, [SEXP]],\n\t\"Rf_asInteger\": [\"int\", [SEXP]],\n\t\"Rf_asLogical\": [\"int\", [SEXP]],\n\t\"Rf_asReal\": [\"double\", [SEXP]],\n\t\"Rf_cons\": [SEXP, [SEXP, SEXP]],\n\t\"Rf_defineVar\": [\"void\", [SEXP, SEXP, \"pointer\"]],\n\t\"Rf_elt\": [SEXP, [SEXP, \"int\"]],\n\t\"Rf_endEmbeddedR\": [\"void\", [\"int\"]],\t\t\t\t// void Rf_endEmbeddedR(int fatal);\n\t\"Rf_eval\": [SEXP, [SEXP, \"int*\"]],\n\t\"Rf_findFun\": [SEXP, [SEXP, SEXP]],\t\t\t\t\t// SEXP Rf_findFun(SEXP, SEXP)\n\t\"Rf_findVar\": [SEXP, [SEXP, SEXP]],\t\t\t\t\t// SEXP Rf_findVar(SEXP, SEXP)\n\t\"Rf_getAttrib\": [SEXP, [SEXP, SEXP]],\n\t\"Rf_initEmbeddedR\": [\"int\", [\"int\", stringArr]],\t// int Rf_initEmbeddedR(int argc, char *argv[]);\n\t\"Rf_initialize_R\": [\"int\", [\"int\", stringArr]],\n\t\"Rf_install\": [SEXP, [\"string\"]],\n\t\"Rf_isArray\": [\"int\", [SEXP]],\t\t\t\t\t\t// Rboolean Rf_isArray(SEXP);\n\t\"Rf_isComplex\": [\"int\", [SEXP]],\t\t\t\t\t// Rboolean Rf_isComplex(SEXP);\n\t\"Rf_isExpression\": [\"int\", [SEXP]],\t\t\t\t\t// Rboolean Rf_isExpression(SEXP);\n\t\"Rf_isFactor\": [\"int\", [SEXP]],\t\t\t\t\t\t// Rboolean Rf_isFactor(SEXP);\n\t\"Rf_isFunction\": [\"int\", [SEXP]],\t\t\t\t\t// Rboolean Rf_isFunction(SEXP);\n\t\"Rf_isInteger\": [\"int\", [SEXP]],\t\t\t\t\t// Rboolean Rf_isInteger(SEXP);\n\t\"Rf_isList\": [\"int\", [SEXP]],\t\t\t\t\t\t// Rboolean Rf_isList(SEXP);\n\t\"Rf_isLogical\": [\"int\", [SEXP]],\t\t\t\t\t// Rboolean Rf_isLogical(SEXP);\n\t\"Rf_isMatrix\": [\"int\", [SEXP]],\t\t\t\t\t\t// Rboolean Rf_isMatrix(SEXP);\n\t\"Rf_isNull\": [\"int\", [SEXP]],\t\t\t\t\t\t// Rboolean Rf_isNull(SEXP);\n\t\"Rf_isNumber\": [\"int\", [SEXP]],\t\t\t\t\t\t// Rboolean Rf_isNumber(SEXP);\n\t\"Rf_isNumeric\": [\"int\", [SEXP]],\t\t\t\t\t// Rboolean Rf_isNumeric(SEXP);\n\t\"Rf_isPrimitive\": [\"int\", [SEXP]],\t\t\t\t\t// Rboolean Rf_isPrimitive(SEXP);\n\t\"Rf_isReal\": [\"int\", [SEXP]],\t\t\t\t\t\t// Rboolean Rf_isReal(SEXP);\n\t\"Rf_isS4\": [\"int\", [SEXP]],\t\t\t\t\t\t\t// Rboolean Rf_isS4(SEXP);\n\t\"Rf_isString\": [\"int\", [SEXP]],\t\t\t\t\t\t// Rboolean Rf_isString(SEXP);\n\t\"Rf_isValidString\": [\"int\", [SEXP]],\t\t\t\t// Rboolean Rf_isValidString(SEXP);\n\t\"Rf_isVector\": [\"int\", [SEXP]],\t\t\t\t\t\t// Rboolean Rf_isVector(SEXP);\n\t\"Rf_lang1\": [SEXP, [SEXP]],\n\t\"Rf_lang2\": [SEXP, [SEXP, SEXP]],\n\t\"Rf_lang3\": [SEXP, [SEXP, SEXP, SEXP]],\n\t\"Rf_lang4\": [SEXP, [SEXP, SEXP, SEXP, SEXP]],\n\t\"Rf_lang5\": [SEXP, [SEXP, SEXP, SEXP, SEXP, SEXP]],\n\t\"Rf_lang6\": [SEXP, [SEXP, SEXP, SEXP, SEXP, SEXP, SEXP]],\n\t\"Rf_lcons\": [SEXP, [SEXP, SEXP]],\n\t\"Rf_length\": [\"int\", [SEXP]],\n\t\"Rf_lengthgets\": [SEXP, [SEXP]],\n\t\"Rf_mainloop\": [\"void\", []],\t\t\t\t\t\t// void Rf_mainloop();\n\t\"Rf_mkChar\": [SEXP, [\"string\"]],\n\t\"Rf_mkCharCE\": [SEXP, [\"string\", \"int\"]],\n\t\"Rf_mkString\": [SEXP, [\"string\"]],\n\t\"Rf_protect\": [SEXP, [SEXP]],\n\t\"Rf_setAttrib\": [SEXP, [SEXP, SEXP, SEXP]],\n\t\"Rf_setVar\": [SEXP, [SEXP, SEXP, SEXP]],\n\t\"Rf_translateCharUTF8\": [\"string\", [SEXP]],\t\t\t// const char* Rf_translateCharUTF8(SEXP x)\n\t\"Rf_unprotect\": [\"void\", [\"int\"]],\n\t\"SET_NAMED\": [\"void\", [SEXP, \"int\"]],\n\t\"SET_STRING_ELT\": [SEXP, [SEXP, \"int\", SEXP]],\t\t// memory.c\n\t\"SET_TAG\": [\"void\", [SEXP, SEXP]],\n\t\"STRING_ELT\": [SEXP, [SEXP, \"int\"]],\t\t\t\t// memory.c\n\t\"STRING_PTR\": [\"pointer\", [SEXP]],\t\t\t\t\t// memory.c\n\t\"ALTVEC_DATAPTR\": [\"pointer\", [SEXP]],\n\t\"STDVEC_DATAPTR\": [\"pointer\", [SEXP]],\n\t\"DATAPTR\": [\"pointer\", [SEXP]],\n\t\"TAG\": [SEXP, [SEXP]],\n\t\"TYPEOF\": [\"int\", [SEXP]],\n\t\"VECTOR_ELT\": [SEXP, [SEXP, \"int\"]],\n\t\"ptr_R_Busy\": [\"pointer\", undefined],\t// void R_Busy (int which)\n\t\"ptr_R_ShowMessage\": [\"pointer\", undefined],\t// void R_ShowMessage(const char *s)\n\t\"ptr_R_ReadConsole\": [\"pointer\", undefined],\t// int R_ReadConsole(const char *prompt, unsigned char *buf, int len, int addtohistory);\n\t\"ptr_R_WriteConsole\": [\"pointer\", undefined],\t\t// void R_WriteConsole(const char *buf, int len)\n\t\"ptr_R_WriteConsoleEx\": [\"pointer\", undefined],\t// void R_WriteConsoleEx(const char *buf, int len, int otype)\n\t\"R_GlobalEnv\": [SEXP, undefined], \n\t\"R_NaString\": [SEXP, undefined], \n\t\"R_BlankString\": [SEXP, undefined], \n\t//\"R_IsNA\": [\"int\", [ieee_double]],\t\t\t\t\t// Rboolean R_IsNA(double);\n\t//\"R_IsNaN\": [\"int\", [ieee_double]],\t\t\t\t// Rboolean R_IsNaN(double);\n};\n\nvar libR = undefined;\n\n/**\n * Load libR from appropriate place.\n *\t@constructor\n *\t@param r_path\t\t\t\"auto\" (default) || \"environment\" || \"system\" || \"buildin\" || path to R_HOME\n *\t\t\t\t\t\t\t\"auto\" - try \"environment\" -> \"system\" -> \"buildin\"\n *\t\t\t\t\t\t\t\"environment\" - use environmental R_HOME and LD_LIBRARY_PATH. libr-bridge handles nothing.\n *\t\t\t\t\t\t\t\"system\" - find system installed R\n *\t\t\t\t\t\t\t\"buildin\" - (NOT IMPLEMENTED) use redistributed binary attached with libr-bridge-bin\n *\t@returns libR object which enables access to dynamic link library.\n */\nexport default function createLibR(r_path = \"auto\"){\n\n\tif(libR !== void 0){\n\t\treturn libR;\n\t}\n\n\tdebug(`creating libR: ${r_path}`);\n\n\tif(r_path == \"auto\"){\n\t\ttry{\n\t\t\tlibR = createLibR(\"environment\");\n\t\t}catch(e){\n\t\t\ttry{\n\t\t\t\tlibR = createLibR(\"system\");\n\t\t\t}catch(e){\n\t\t\t\ttry{\n\t\t\t\t\tlibR = createLibR(\"buildin\");\n\t\t\t\t}catch(e){\n\t\t\t\t\tthrow new Error(\"R not found. Please specify path manually.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}else if(r_path == \"environment\"){\n\t\t// use environmental R_HOME\n\t\tif(process.env.R_HOME !== void 0){\n\t\t\tlibR = createLibR(process.env.R_HOME);\n\t\t}\n\t}else if(r_path == \"system\"){\n\t\tlet my_path;\n\t\ttry {\n\t\t\tif (process.platform == \"win32\") {\n\t\t\t\tconst windef = windowsRegistry.windef;\n\t\t\t\tlet k;\n\t\t\t\ttry {\n\t\t\t\t\tk = new windowsRegistry.Key(windef.HKEY.HKEY_LOCAL_MACHINE, \"SOFTWARE\\\\R-core\\\\R\", windef.KEY_ACCESS.KEY_READ);\n\t\t\t\t}catch(e){\n\t\t\t\t\tdebug(\"No key in HLM, finding HCU.\");\n\t\t\t\t\tk = new windowsRegistry.Key(windef.HKEY.HKEY_CURRENT_USER, \"SOFTWARE\\\\R-core\\\\R\", windef.KEY_ACCESS.KEY_READ);\n\t\t\t\t}\n\t\t\t\tmy_path = k.getValue(\"InstallPath\");\n\t\t\t\tk.close();\n\t\t\t}else{\n\t\t\t\tconst ret = child_process.execSync(\"Rscript -e \\\"cat(Sys.getenv('R_HOME'))\\\"\");\n\t\t\t\tmy_path = ret.toString();\n\t\t\t}\n\t\t\tlibR = createLibR(my_path);\n\t\t}catch(e){\n\t\t\tdebug(\"Loading system R failure: \" + e);\n\t\t\tthrow new Error(\"Couldn't load installed R (RScript not found or bad registry)\");\n\t\t}\n\t}else if(r_path == \"buildin\"){\n\t\tthrow new Error(\"NOT IMPLEMENTED.\");\n\t}else if(r_path == \"\"){\n\t\tthrow new Error(\"Please specify installed R.\");\n\t}else{\n\t\t// assuming path of installed R is specified.\n\t\tconst delim = path.delimiter;\n\t\tif(r_path.slice(-1) == path.sep) r_path = r_path.slice(0, -1);\t// remove trailing \"/\" (or \"\\\")\n\t\tprocess.env.R_HOME = r_path;\n\t\tif (process.platform == \"win32\") {\n\t\t\tprocess.env.PATH = `${r_path}\\\\bin\\\\x64${delim}` + process.env.PATH;\n\t\t\tlibR = ffi.Library(`${r_path}\\\\bin\\\\x64\\\\R.dll`, apiList);\n\t\t}else{\n\t\t\tprocess.env.LD_LIBRARY_PATH = `${r_path}${delim}${r_path}/lib${delim}` + process.env.LD_LIBRARY_PATH;\n\t\t\tprocess.env.DYLD_LIBRARY_PATH = `${r_path}${delim}${r_path}/lib${delim}` + process.env.DYLD_LIBRARY_PATH;\n\t\t\tlibR = ffi.Library(\"libR\", apiList);\n\t\t}\n\t}\n\n\tif(libR == undefined){\n\t\tthrow new Error(\"Couldn't read libR\");\n\t}\n\n\treturn libR;\n\n}\n/*\n * vim: filetype=javascript\n */\n",
    "static": true,
    "longname": "/Users/kcrt/prog/libr-bridge/libR.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 146,
    "kind": "variable",
    "name": "debug",
    "memberof": "libr-bridge/libR.mjs",
    "static": true,
    "longname": "libr-bridge/libR.mjs~debug",
    "access": "public",
    "export": false,
    "importPath": "libr-bridge/libR",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 147,
    "kind": "variable",
    "name": "stringArr",
    "memberof": "libr-bridge/libR.mjs",
    "static": true,
    "longname": "libr-bridge/libR.mjs~stringArr",
    "access": "public",
    "export": false,
    "importPath": "libr-bridge/libR",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 148,
    "kind": "variable",
    "name": "SEXP",
    "memberof": "libr-bridge/libR.mjs",
    "static": true,
    "longname": "libr-bridge/libR.mjs~SEXP",
    "access": "public",
    "export": true,
    "importPath": "libr-bridge/libR",
    "importStyle": "{SEXP}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "variable",
    "name": "SEXPREC_ALIGN_SIZE",
    "memberof": "libr-bridge/libR.mjs",
    "static": true,
    "longname": "libr-bridge/libR.mjs~SEXPREC_ALIGN_SIZE",
    "access": "public",
    "export": true,
    "importPath": "libr-bridge/libR",
    "importStyle": "{SEXPREC_ALIGN_SIZE}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "variable",
    "name": "ComplexInR",
    "memberof": "libr-bridge/libR.mjs",
    "static": true,
    "longname": "libr-bridge/libR.mjs~ComplexInR",
    "access": "public",
    "export": true,
    "importPath": "libr-bridge/libR",
    "importStyle": "{ComplexInR}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "variable",
    "name": "SEXPTYPE",
    "memberof": "libr-bridge/libR.mjs",
    "static": true,
    "longname": "libr-bridge/libR.mjs~SEXPTYPE",
    "access": "public",
    "export": true,
    "importPath": "libr-bridge/libR",
    "importStyle": "{SEXPTYPE}",
    "description": "R SEXP type enums",
    "lineNumber": 26,
    "type": {
      "types": [
        "{\"NILSXP\": *, \"SYMSXP\": number, \"LISTSXP\": number, \"CLOSXP\": number, \"ENVSXP\": number, \"PROMSXP\": number, \"LANGSXP\": number, \"SPECIALSXP\": number, \"BUILTINSXP\": number, \"CHARSXP\": number, \"LGLSXP\": number, \"INTSXP\": number, \"REALSXP\": number, \"CPLXSXP\": number, \"STRSXP\": number, \"DOTSXP\": number, \"ANYSXP\": number, \"VECSXP\": number, \"EXPRSXP\": number, \"BCODESXP\": number, \"EXTPTRSXP\": number, \"WEAKREFSXP\": number, \"RAWSXP\": number, \"S4SXP\": number, \"NEWSXP\": number, \"FREESXP\": number, \"FUNSXP\": number}"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "variable",
    "name": "ParseStatus",
    "memberof": "libr-bridge/libR.mjs",
    "static": true,
    "longname": "libr-bridge/libR.mjs~ParseStatus",
    "access": "public",
    "export": true,
    "importPath": "libr-bridge/libR",
    "importStyle": "{ParseStatus}",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "{\"PARSE_NULL\": *, \"PARSE_OK\": number, \"PARSE_INCOMPLETE\": number, \"PARSE_ERROR\": number, \"PARSE_EOF\": number}"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "variable",
    "name": "cetype_t",
    "memberof": "libr-bridge/libR.mjs",
    "static": true,
    "longname": "libr-bridge/libR.mjs~cetype_t",
    "access": "public",
    "export": true,
    "importPath": "libr-bridge/libR",
    "importStyle": "{cetype_t}",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "{\"CE_NATIVE\": *, \"CE_UTF8\": number, \"CE_LATIN1\": number, \"CE_BYTES\": number, \"CE_SYMBOL\": number, \"CE_ANY\": number}"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "variable",
    "name": "apiList",
    "memberof": "libr-bridge/libR.mjs",
    "static": true,
    "longname": "libr-bridge/libR.mjs~apiList",
    "access": "public",
    "export": false,
    "importPath": "libr-bridge/libR",
    "importStyle": null,
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "type": {
      "types": [
        "{\"CAR\": *, \"CDR\": *, \"NAMED\": *, \"R_CHAR\": *, \"R_curErrorBuf\": *, \"R_NilValue\": *, \"R_ParseVector\": *, \"R_PreserveObject\": *, \"R_ReleaseObject\": *, \"R_setStartTime\": *, \"R_tryEval\": *, \"R_tryEvalSilent\": *, \"Rf_GetRowNames\": *, \"Rf_ScalarInteger\": *, \"Rf_ScalarLogical\": *, \"Rf_ScalarReal\": *, \"Rf_allocVector\": *, \"Rf_asChar\": *, \"Rf_asInteger\": *, \"Rf_asLogical\": *, \"Rf_asReal\": *, \"Rf_cons\": *, \"Rf_defineVar\": *, \"Rf_elt\": *, \"Rf_endEmbeddedR\": *, \"Rf_eval\": *, \"Rf_findFun\": *, \"Rf_findVar\": *, \"Rf_getAttrib\": *, \"Rf_initEmbeddedR\": *, \"Rf_initialize_R\": *, \"Rf_install\": *, \"Rf_isArray\": *, \"Rf_isComplex\": *, \"Rf_isExpression\": *, \"Rf_isFactor\": *, \"Rf_isFunction\": *, \"Rf_isInteger\": *, \"Rf_isList\": *, \"Rf_isLogical\": *, \"Rf_isMatrix\": *, \"Rf_isNull\": *, \"Rf_isNumber\": *, \"Rf_isNumeric\": *, \"Rf_isPrimitive\": *, \"Rf_isReal\": *, \"Rf_isS4\": *, \"Rf_isString\": *, \"Rf_isValidString\": *, \"Rf_isVector\": *, \"Rf_lang1\": *, \"Rf_lang2\": *, \"Rf_lang3\": *, \"Rf_lang4\": *, \"Rf_lang5\": *, \"Rf_lang6\": *, \"Rf_lcons\": *, \"Rf_length\": *, \"Rf_lengthgets\": *, \"Rf_mainloop\": *, \"Rf_mkChar\": *, \"Rf_mkCharCE\": *, \"Rf_mkString\": *, \"Rf_protect\": *, \"Rf_setAttrib\": *, \"Rf_setVar\": *, \"Rf_translateCharUTF8\": *, \"Rf_unprotect\": *, \"SET_NAMED\": *, \"SET_STRING_ELT\": *, \"SET_TAG\": *, \"STRING_ELT\": *, \"STRING_PTR\": *, \"ALTVEC_DATAPTR\": *, \"STDVEC_DATAPTR\": *, \"DATAPTR\": *, \"TAG\": *, \"TYPEOF\": *, \"VECTOR_ELT\": *, \"ptr_R_Busy\": *, \"ptr_R_ShowMessage\": *, \"ptr_R_ReadConsole\": *, \"ptr_R_WriteConsole\": *, \"ptr_R_WriteConsoleEx\": *, \"R_GlobalEnv\": *, \"R_NaString\": *, \"R_BlankString\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 155,
    "kind": "variable",
    "name": "libR",
    "memberof": "libr-bridge/libR.mjs",
    "static": true,
    "longname": "libr-bridge/libR.mjs~libR",
    "access": "public",
    "export": false,
    "importPath": "libr-bridge/libR",
    "importStyle": null,
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 156,
    "kind": "function",
    "name": "createLibR",
    "memberof": "libr-bridge/libR.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "libr-bridge/libR.mjs~createLibR",
    "access": "public",
    "export": true,
    "importPath": "libr-bridge/libR",
    "importStyle": "createLibR",
    "description": "Load libR from appropriate place.",
    "lineNumber": 179,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "libR object which enables access to dynamic link library."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "r_path",
        "description": "\"auto\" (default) || \"environment\" || \"system\" || \"buildin\" || path to R_HOME\n\t\t\t\t\t\t\"auto\" - try \"environment\" -> \"system\" -> \"buildin\"\n\t\t\t\t\t\t\"environment\" - use environmental R_HOME and LD_LIBRARY_PATH. libr-bridge handles nothing.\n\t\t\t\t\t\t\"system\" - find system installed R\n\t\t\t\t\t\t\"buildin\" - (NOT IMPLEMENTED) use redistributed binary attached with libr-bridge-bin"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "libR object which enables access to dynamic link library."
    }
  },
  {
    "__docId__": 157,
    "kind": "file",
    "name": "libr-bridge/license.js",
    "content": "/**\n * @license\n * Copyright © 2017 kcrt (TAKAHASHI, Kyohei)\n * Released under the MIT license\n * http://opensource.org/licenses/mit-license.php\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n",
    "static": true,
    "longname": "/Users/kcrt/prog/libr-bridge/license.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 158,
    "kind": "file",
    "name": "libr-bridge/safe-windows-registry.js",
    "content": "if (process.platform == \"win32\") {\n\tmodule.exports = require(\"windows-registry\");\n}else{\n\tmodule.exports = void 0;\n}\n",
    "static": true,
    "longname": "/Users/kcrt/prog/libr-bridge/safe-windows-registry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 159,
    "kind": "file",
    "name": "libr-bridge/test/assert_ext.mjs",
    "content": "export default function assert_ext(assert){\n\tassert.almostEqual = (a, b, allow = 0.001) => assert.ok(Math.abs(a - b) < allow, `${a} is not equal to ${b}`);\n\tassert.arrayEqual = (a, b) => {\n\t\tif(!Array.isArray(a) || !Array.isArray(b)){\n\t\t\tassert.fail(\"not an array.\");\n\t\t}else if(a.length != b.length){\n\t\t\tassert.fail(\"different length\");\n\t\t}else{\n\t\t\tassert.ok(a.every((e, i) => (e == b[i])), `different item: ${a} !== ${b}`);\n\t\t}\n\t};\n}\n/*\n * vim: filetype=javascript\n */\n",
    "static": true,
    "longname": "/Users/kcrt/prog/libr-bridge/test/assert_ext.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 160,
    "kind": "function",
    "name": "assert_ext",
    "memberof": "libr-bridge/test/assert_ext.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "libr-bridge/test/assert_ext.mjs~assert_ext",
    "access": "public",
    "export": true,
    "importPath": "libr-bridge/test/assert_ext",
    "importStyle": "assert_ext",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "assert",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 161,
    "kind": "file",
    "name": "libr-bridge/test/basic.mjs",
    "content": "import R from \"../R\";\nimport assert from \"assert\";\nimport assert_ext from \"./assert_ext\";\nimport Complex from \"Complex\";\nimport { RFactor, RIntArray } from \"../RObject\";\n\nvar r;\nassert_ext(assert);\n\ndescribe(\"Initialize\", () => {\n\tit(\"Initialize\", () => {\n\t\tr = new R();\n\t});\n});\n\ndescribe(\"Primitives\", () => {\n\tit(\"Integer\", () => {\n\t\tassert.equal(1, r.eval(\"as.integer(1)\"));\n\t\tassert.equal(0, r.eval(\"as.integer(0)\"));\n\t\tassert.equal(-1, r.eval(\"as.integer(-1)\"));\n\t\tr.setVar(\"numvar\", 2017);\n\t\tassert.equal(2017, r.getVar(\"numvar\"));\n\t\tassert.equal(2017, r.eval(\"numvar\"));\n\t\tr.setVar(\"intvar\", RIntArray.of(1));\n\t\tassert.equal(1, r.getVar(\"intvar\"));\n\t\tassert.equal(1, r.eval(\"intvar\"));\n\t\tassert.equal(\"integer\", r.eval(\"typeof(intvar)\"));\n\t});\n\tit(\"Real\", () => {\n\t\tassert.equal(1.0, r.eval(\"1.0\"));\n\t\tassert.equal(0.5, r.eval(\"0.5\"));\n\t});\n\tit(\"String\", () => {\n\t\tassert.equal(\"abc\", r.eval(\"\\\"abc\\\"\"));\n\t\tr.setVar(\"strvar\", \"kcrt\");\n\t\tassert.equal(\"kcrt\", r.getVar(\"strvar\"));\n\t\tassert.equal(\"kcrt\", r.eval(\"strvar\"));\n\t\tassert.equal(\"\", r.eval(\"\\\"\\\"\"));\n\t});\n\tit(\"Logical (Boolean)\", () => {\n\t\tassert.equal(true, r.eval(\"T\"));\n\t\tassert.equal(false, r.eval(\"F\"));\n\t\tassert.notEqual(false, r.eval(\"T\"));\n\t\tassert.notEqual(true, r.eval(\"F\"));\n\t\tr.setVar(\"logvar\", true);\n\t\tassert.ok(r.eval(\"logvar\"));\n\t});\n\tit(\"Complex\", () => {\n\t\tconst cpxvar = new Complex(1, 2);\n\t\tassert.ok(cpxvar.equals(r.eval(\"1+2i\")));\n\t\tr.setVar(\"cpxvar\", cpxvar);\n\t\tassert.equal(r.eval(\"Re(cpxvar)\"), cpxvar.real);\n\t\tassert.equal(r.eval(\"Im(cpxvar)\"), cpxvar.im);\n\t\tassert.equal(r.eval(\"abs(cpxvar)\"), cpxvar.abs());\n\t\tassert.equal(r.eval(\"Arg(cpxvar)\"), cpxvar.angle());\n\t\tassert.ok(r.eval(\"cpxvar^2\").equals(cpxvar.multiply(cpxvar)));\n\t});\n});\n\ndescribe(\"Special values\", () => {\n\tit(\"Empty vector\", () => {\n\t\tassert.equal(r.eval(\"vector(mode=\\\"numeric\\\", length=0)\").length, 0);\n\t\tr.setVar(\"empty_vector\", []);\n\t\tassert.equal(r.eval(\"length(empty_vector)\"), 0);\n\t});\n\tit(\"NA\", () => {\n\t\tassert.strictEqual(r.eval(\"NA\"), void 0);\n\t\tassert.arrayEqual(r.eval(\"c(1.1, 2.1, NA)\"), [1.1, 2.1, undefined]);\n\t\tassert.arrayEqual(r.eval(\"c(1:2, NA)\"), [1, 2, undefined]);\n\t\tassert.arrayEqual(r.eval(\"c('a', '', NA)\"), [\"a\", \"\", undefined]);\n\n\t\tr.setVar(\"NASingle\", void 0);\n\t\tr.setVar(\"NAReal\", [1.0, void 0]);\n\t\tr.setVar(\"NAStr\", [\"a\", void 0]);\n\t\tr.setVar(\"NABool\", [true, void 0]);\n\t\tassert.ok(r.eval(\"is.na(NASingle) && !is.nan(NASingle)\"));\n\t\tassert.ok(r.eval(\"is.na(NAReal[2]) && !is.nan(NAReal[2])\"));\n\t\tassert.ok(r.eval(\"is.na(NAStr[2]) && !is.nan(NAStr[2])\"));\n\t\tassert.ok(r.eval(\"is.na(NABool[2]) && !is.nan(NABool[2])\"));\n\t});\n\tit(\"NaN\", () => {\n\t\tassert.ok(isNaN(r.eval(\"NaN\")));\n\t\tassert.ok(isNaN(r.eval(\"0 / 0\")));\n\t});\n\tit(\"Inf\", () => {\n\t\tassert.strictEqual(r.eval(\"Inf\"), Infinity);\n\t\tassert.strictEqual(r.eval(\"-Inf\"), -Infinity);\n\t});\n});\n\ndescribe(\"Array\", () => {\n\tconst arr_1to100 = R.range(1, 101);\n\tit(\"ES Array <-> R Array\", () => {\n\t\tassert.arrayEqual([3, 2, 1], r.eval(\"as.integer(c(3, 2, 1))\"));\n\t\tassert.arrayEqual([1, 2, 3], r.c(1, 2, 3));\n\t\tassert.arrayEqual(arr_1to100, r.eval(\"1:100\"));\n\t\tr.setVar(\"myarr\", arr_1to100);\n\t\tassert.ok(r.eval(\"all.equal(myarr, 1:100)\"));\n\t\tassert.ok(!r.eval(\"isTRUE(all.equal(myarr, 2:101))\"));\n\t\tassert.arrayEqual(arr_1to100, r.getVar(\"myarr\"));\n\t});\n\tit(\"Int Array\", () => {\n\t\tassert.arrayEqual(new RIntArray(...arr_1to100), r.eval(\"1:100\"));\n\t});\n\tit(\"String Array\", () => {\n\t\tvar strArr = [\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"];\n\t\tassert.arrayEqual(strArr, r.eval(\"c(\\\"abc\\\", \\\"def\\\", \\\"ghi\\\", \\\"jkl\\\", \\\"mno\\\")\"));\n\t\tr.setVar(\"strArr\", strArr);\n\t\tassert.arrayEqual(strArr, r.getVar(\"strArr\"));\n\t});\n});\n\ndescribe(\"Factor\", () => {\n\tconst v = [\"apple\", \"banana\", \"apple\", undefined, \"orange\"];\n\tconst idx = [1, 2, 1, undefined, 3];\n\tit(\"Create factor\", () => {\n\t\tconst fac = new RFactor(v);\n\t\tassert.arrayEqual(fac, idx);\n\t\tr.setVar(\"facvar\", fac);\n\t\tassert.arrayEqual(r.getVar(\"facvar\"), idx);\n\t});\n\tit(\"Create ordered factor\", () => {\n\t\tconst fac = new RFactor(v, void 0, true);\n\t\tassert.arrayEqual(fac, idx);\n\t\tr.setVar(\"facvar\", fac);\n\t\tassert.arrayEqual(r.getVar(\"facvar\"), idx);\n\t});\n});\n\ndescribe(\"Attribute\", () => {\n\tit(\"Names\", () => {\n\t\tr.setVar(\"numvar\", 2017);\n\t\tr.eval(\"names(numvar) = \\\"hello\\\"\");\n\t\tassert.equal(\"hello\", r.getVarNames(\"numvar\"));\n\n\t\tr.setVar(\"strvar\", \"kcrt\");\n\t\tr.setVarNames(\"strvar\", \"hello\");\n\t\tassert.equal(\"hello\", r.eval(\"names(strvar)\"));\n\n\t\tr.setVar(\"no_name_var\", \"test\");\n\t\tassert.strictEqual(r.getVarNames(\"no_name_var\"), void 0);\n\t});\n});\n\ndescribe(\"Basic calculation\", () => {\n\tit(\"+-*/\", () => {\n\t\tconst expression = [\n\t\t\t\"1 + 1\", \"10 + 20\", \"1984 + 2017\", \"-1 + 3\",\n\t\t\t\"1 - 1\", \"2 - 30\", \"0 - 5\", \"1 - (-3)\",\n\t\t\t\"1 * 1\", \"2 * 10\", \"1984 * 2017\", \"0 * 99999\", \"99999 * 99999\",\n\t\t\t\"8 / 4\", \"200 / 5\", \"4 / 3\", \"22 / 7\", \"0 / 100\"\n\t\t];\n\t\texpression.map((e) => {\n\t\t\tassert.almostEqual(eval(e), r.eval(e));\n\t\t});\n\t}),\n\tit(\"pow\", () => {\n\t\tassert.almostEqual(Math.pow(3, 15), r.eval(\"3^15\"));\n\t}),\n\tit(\"modulo\", () => {\n\t\tassert.almostEqual(1549 % 8, r.eval(\"1549 %% 8\"));\n\t});\n});\n\ndescribe(\"Math function\", () => {\n\tit(\"Trigonometric functions\", () => {\n\t\tassert.almostEqual(Math.sin(0), r.sin(0));\n\t\tassert.almostEqual(Math.sin(0.5), r.sin(0.5));\n\t\tassert.almostEqual(Math.cos(0), r.cos(0));\n\t\tassert.almostEqual(Math.cos(0.5), r.cos(0.5));\n\t\tassert.almostEqual(Math.tan(0), r.tan(0));\n\t\tassert.almostEqual(Math.tan(0.5), r.tan(0.5));\n\t});\n\tit(\"Array and functions\", () => {\n\t\tconst arr_1to100 = R.range(1, 101);\n\t\tconst sum_1to100 = arr_1to100.reduce((pre, v) => pre + v);\n\t\tassert.almostEqual(sum_1to100, r.sum(arr_1to100));\n\t\tassert.almostEqual(sum_1to100 / 100, r.mean(arr_1to100));\n\t});\n});\n\ndescribe(\"Function call with named arguments\", () => {\n\tit(\"Named arguments\", () => {\n\t\tassert.strictEqual(r.mean([1, 2, 3, undefined]), void 0);\n\t\tassert.strictEqual(r.mean([1, 2, 3, undefined], {\"na.rm\": true}), 2);\n\t});\n});\n\ndescribe(\"Long command\", () => {\n\tit(\"factorial\", () => {\n\t\tr.eval(`\n\t\t\tmyfactorial <- function(x) {\n\t\t\t\tif (x == 0) {\n\t\t\t\t\treturn(1)\n\t\t\t\t} else {\n\t\t\t\t\treturn(x * myfactorial(x - 1))\n\t\t\t\t}\n\t\t\t}\n\t\t`);\n\t\tlet factorial_50 = r.func(\"myfactorial\")(50);\n\t\tassert.equal(factorial_50, R.range(1, 51).reduce((pre, v) => pre * v));\n\t});\n});\n\ndescribe(\"Failing test\", () => {\n\tit(\"non existing variable\", () => {\n\t\tassert.strictEqual(r.getVar(\"non_exsisting_var\"), void 0);\n\t});\n\tit(\"Syntax error in eval\", () => {\n\t\tassert.throws(() => {r.eval(\"2 *+* 4\", true);}, Error);\n\t});\n\tit(\"Execution error in eval\", () => {\n\t\tassert.throws(() => {r.eval(\"1 <- 5\", true);}, Error);\n\t\tassert.ok(r.evalWithTry(\"1 <- 5\", true).startsWith(\"Error\"));\n\t});\n\tit(\"Execution error in function call\", () => {\n\t\tassert.throws(() => {r.func[\"stop\"](\"Test Error\");}, Error);\n\t});\n});\n\n/*\n * vim: filetype=javascript\n */\n",
    "static": true,
    "longname": "/Users/kcrt/prog/libr-bridge/test/basic.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 162,
    "kind": "file",
    "name": "libr-bridge/test/callback.mjs",
    "content": "\nimport R from \"../R\";\nimport assert from \"assert\";\nimport assert_ext from \"./assert_ext\";\n\nvar r;\nassert_ext(assert);\n\ndescribe(\"Initialize\", () => {\n\tit(\"Initialize\", () => {\n\t\tr = new R();\n\t});\n});\n\ndescribe(\"Console\", () => {\n\tit(\"test console\", () => {\n\t\tr.overrideShowMessage( (msg) => console.log(\"[Message from R] \" + msg));\n\t\tr.overrideReadConsole( (_prompt) => \"Answer\" );\n\t\tr.overrideWriteConsole( (msg) => console.log(\"[R] \" + msg));\n\t\tr.print(\"Print from R\");\n\t\tconst readline = r.func(\"readline\");\n\t\tconst ans = readline(\"MyReadLine> \");\n\t\tassert.equal(ans, \"Answer\");\n\t});\n});\n\ndescribe(\"Busy\", () => {\n\tit(\"on Busy\", () => {\n\t\tr.overrideBusy((which) => console.log(\"[Busy status]: \" + which));\n\t});\n});\n\n/*\n * vim: filetype=javascript\n */\n",
    "static": true,
    "longname": "/Users/kcrt/prog/libr-bridge/test/callback.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 163,
    "kind": "file",
    "name": "libr-bridge/test/unicode.mjs",
    "content": "import R from \"../R\";\nimport assert from \"assert\";\nimport assert_ext from \"./assert_ext\";\n\nvar r;\nassert_ext(assert);\n\ndescribe(\"Initialize\", () => {\n\tit(\"Initialize\", () => {\n\t\tr = new R();\n\t});\n});\n\ndescribe(\"Unicode\", () => {\n\tit(\"Variable and value\", () => {\n\t\tr.setVar(\"挨拶\", \"こんにちわ\");\n\t\tassert.equal(r.getVar(\"挨拶\"), \"こんにちわ\");\n\t});\n});\n\n\n/*\n * vim: filetype=javascript\n */\n",
    "static": true,
    "longname": "/Users/kcrt/prog/libr-bridge/test/unicode.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "libr-bridge\n========================================\n\n![Travis CI](https://travis-ci.org/kcrt/libr-bridge.svg?branch=master)\n\nBridging module: JavaScript < - > R\n\n![🄬🌉⬢](./logo.png)\n\n\nSorry! It's under development.\n----------------------------------------\n  * Some important features including factor, dataframe, console handling, S3/S4 object handling and expression are not supported yet!\n  * Incompatible API changes may be held.\n  * Please do not use in the production environment until specifications are fixed.\n  * Pull requests are always welcome.\n\nWhat is libr-bridge?\n----------------------------------------\n\n[**libr-bridge**](https://github.com/kcrt/libr-bridge) is a very powerful npm package which enables you to use R function/statistical method in Node.js environment.\n\n[R (The R Foundation, Vienna, Austria)](https://www.r-project.org) is a free software environment for statistical computing. With **libr-bridge**, you can use function in R as if they were JavaScript native function.\n\nHow to Use\n----------------------------------------\n\nFollowing samples and **libr-bridge** are written with ECMAScript 6 modules syntex (import/export).\nPlease use [**esm**](https://github.com/standard-things/esm) or **--experimental-modules**.\n\n```javascript\nlet r = new R();\n\nconst arrA = [1.00, 3.36, 8.01, 1.22, 3.74, 2.43, 7.95, 8.32, 7.45, 4.36];\nconst arrB = [1.04, 3.65, 6.82, 1.46, 2.70, 2.49, 7.48, 8.28, 8.93, 5.63];\n\n/* Some functions are already loaded to libr-bridge */\nconsole.log(\"Mean of arrA: \" + r.mean(arrA));\nconsole.log(\"Mean of arrB: \" + r.mean(arrB));\nconsole.log(\"Peason's correlation coefficient: \" + r.cor(arrA, arrB));\n\n/* You can pass data to R */\nr.setVar(\"a\", arrA);\n\n/* And data can be used in R */\nconsole.log(r.eval('sum(a)'));\nr.eval('b <- a / 2');\nconsole.log(r.eval('b'));\n\n/* You can receive data from R */\nlet b = r.getVar(\"b\");\n\n/* Execute complex command with eval. */\nr.eval(`\n\tmyfactorial <- function(x) {\n\t\tif (x == 0) {\n\t\t\treturn(1)\n\t\t} else {\n\t\t\treturn(x * myfactorial(x - 1))\n\t\t}\n\t}\n`);\nlet factorial_50 = r.func(\"myfactorial\")(50);\nconsole.log(factorial_50);\n```\n\nAPI\n----------------------------------------\n### `Document`\nPlease see doc directory.\n\nDepending package\n----------------------------------------\n### npm\n1. [node-ffi: Node.js Foreign Function Interface](https://github.com/node-ffi/node-ffi)\n1. [ref * Turn Buffer instances into \"pointers\"](https://tootallnate.github.io/ref/)\n1. [arian/Complex: Calculations with Complex Numbers in JavaScript](https://github.com/arian/Complex)\n\nMy TODO list\n----------------------------------------\n\n - [x] Factor\n - [ ] Dataframe\n - [x] Console handling\n - [ ] S3 class\n - [ ] S4 class\n - [ ] Graphic handling\n\nAuthor information\n----------------------------------------\nProgrammed by kcrt (TAKAHASHI, Kyohei)\nhttp://profile.kcrt.net/\n\t\nLicense\n----------------------------------------\n\tCopyright © 2017 kcrt (TAKAHASHI, Kyohei)\n\tReleased under the MIT license\n\thttp://opensource.org/licenses/mit-license.php\n\nReference\n----------------------------------------\n### English\n1. [R Internals](https://cran.r-project.org/doc/manuals/r-release/R-ints.html)\n1. [R internals (by Hadley)](https://github.com/hadley/r-internals)\n1. [Advanced R by Hadley Wickham](http://adv-r.had.co.nz)\n\t- You can buy [Physical copy](https://www.amazon.com/dp/1466586966) of this material. Especially recommended!\n1. [Rccp: Seamless R anc C++ Integration](https://github.com/RcppCore/Rcpp)\n1. [Rcpp documentation](http://dirk.eddelbuettel.com/code/rcpp/html/index.html)\n1. [Rcpp for everyone (Masaki E. Tsuda)](https://teuder.github.io/rcpp4everyone_en/)\n\n### Japanese\n1. [R入門 Ver.1.7.0](https://cran.r-project.org/doc/contrib/manuals-jp/R-intro-170.jp.pdf)\n1. [R言語定義 Ver.1.1.0 DRAFT](https://cran.r-project.org/doc/contrib/manuals-jp/R-lang.jp.v110.pdf)\n1. [Rの拡張を書く Ver2.1.0](https://cran.r-project.org/doc/contrib/manuals-jp/R-exts.jp.pdf)\n1. [R言語徹底解説 Hadley Wickham (著), 石田 基広ら (翻訳)](http://amzn.to/2xhIZtg) 特におすすめです。\n1. [みんなのRcpp (Masaki E. Tsuda)](https://teuder.github.io/rcpp4everyone_ja/)\n\n\n",
    "longname": "/Users/kcrt/prog/libr-bridge/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n    \"name\": \"libr-bridge\",\n    \"version\": \"0.1.6\",\n    \"description\": \"Use libR from node.js\",\n    \"main\": \"index\",\n    \"scripts\": {\n        \"doc\": \"rm -R doc; ./node_modules/.bin/esdoc; cp ./logo.png doc\",\n        \"test\": \"./node_modules/.bin/mocha-esm test/*.mjs\",\n        \"debug-test\": \"DEBUG=libr-bridge:* ./node_modules/.bin/mocha-esm  test/*.mjs\",\n        \"run-develop\": \"DEBUG=libr-bridge:* node -r esm develop.mjs\",\n        \"debug-develop\": \"node --inspect-brk -r esm develop.mjs\",\n\t\t\"lint\": \"./node_modules/.bin/eslint --ext .js,.mjs .\"\n    },\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/kcrt/libr-bridge.git\"\n    },\n    \"author\": \"kcrt\",\n    \"license\": \"MIT\",\n    \"dependencies\": {\n        \"Complex\": \"^3.0.0\",\n        \"esm\": \"^3.0.62\",\n        \"ffi\": \"https://github.com/kcrt/node-ffi.git\",\n        \"node-gyp\": \"^3\",\n        \"ref-array\": \"^1\",\n        \"ref-struct\": \"^1.1.0\",\n        \"windows-registry\": \"^0.1.3\"\n    },\n    \"devDependencies\": {\n        \"esdoc\": \"^1\",\n        \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n        \"esdoc-importpath-plugin\": \"^1\",\n        \"esdoc-standard-plugin\": \"^1\",\n        \"eslint\": \"^5.2.0\",\n        \"mocha\": \"^3\",\n        \"mocha-esm\": \"^1.0.2\"\n    }\n}\n",
    "longname": "/Users/kcrt/prog/libr-bridge/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]